<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Roughgarden, Tim on Chege's Blog</title><link>https://www.curiosities.dev/cited-authors/Roughgarden-Tim/</link><description>Recent content in Roughgarden, Tim on Chege's Blog</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Wed, 27 Nov 2024 00:00:00 +0000</lastBuildDate><atom:link href="https://www.curiosities.dev/cited-authors/Roughgarden-Tim/index.xml" rel="self" type="application/rss+xml"/><item><title>Consistent Hashing</title><link>https://www.curiosities.dev/computer-science/miscellaneous/consistent-hashing/</link><pubDate>Wed, 27 Nov 2024 00:00:00 +0000</pubDate><guid>https://www.curiosities.dev/computer-science/miscellaneous/consistent-hashing/</guid><description>Consistent hashing makes me think of hashing without randomization. Why isn&amp;rsquo;t every hash consistent by definition? For example, a map implementation would need consistent hashing lest it&amp;rsquo;s inaccurate when searching for stored values. Or is consistent hashing a tradeoff between collision-resistance and speed?
Web Caching Was the original motivation for consistent hashing. With a web cache, if a browser requests a URL that is not in the cache, the page is downloaded from the server, and the result is sent to both the browser and the cache.</description></item></channel></rss>