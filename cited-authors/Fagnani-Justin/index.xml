<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Fagnani, Justin on Chege's Blog</title><link>https://www.curiosities.dev/cited-authors/Fagnani-Justin/</link><description>Recent content in Fagnani, Justin on Chege's Blog</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Sun, 05 May 2024 00:00:00 +0000</lastBuildDate><atom:link href="https://www.curiosities.dev/cited-authors/Fagnani-Justin/index.xml" rel="self" type="application/rss+xml"/><item><title>Inheritance</title><link>https://www.curiosities.dev/computer-science/programming-challenges/language-concepts/type-systems/user-defined-types/inheritance/</link><pubDate>Sun, 05 May 2024 00:00:00 +0000</pubDate><guid>https://www.curiosities.dev/computer-science/programming-challenges/language-concepts/type-systems/user-defined-types/inheritance/</guid><description>Mixins Introduced to mixins by . Didn&amp;rsquo;t know that there are passionate advocates for this, e.g., &amp;rsquo;s &amp;ldquo;You can even look at normal subclass inheritance as a degenerate form of mixin inheritance where the superclass is known at class definition time, and there&amp;rsquo;s only one application of it.&amp;rdquo;
A mix-in is an abstract subclass. This technique is especially useful in languages where a class can only have a single superclass.</description></item></channel></rss>