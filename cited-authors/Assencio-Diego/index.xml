<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Assencio, Diego on Chege&#39;s Blog</title>
    <link>https://www.curiosities.dev/cited-authors/Assencio-Diego/</link>
    <description>Recent content in Assencio, Diego on Chege&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 18 Aug 2022 00:00:00 +0000</lastBuildDate><atom:link href="https://www.curiosities.dev/cited-authors/Assencio-Diego/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Binary Search</title>
      <link>https://www.curiosities.dev/computer-science/sorting-and-searching/binary-search/</link>
      <pubDate>Thu, 18 Aug 2022 00:00:00 +0000</pubDate>
      
      <guid>https://www.curiosities.dev/computer-science/sorting-and-searching/binary-search/</guid>
      <description>Binary Search on a Non-Decreasing \(f: \mathbb{R} \to \mathbb{R}\) Given a number \(L\) and a non-decreasing function \(f: \mathbb{R} \to \mathbb{R}\), find the greatest \(x\) such that \(f(x) \le L\). To start, there are two numbers \(lo\) and \(hi\), such that \(f(lo) \le L &amp;lt; f(hi)\).
Algorithm double binary_search(double lo, double hi, double lim) { while (hi - lo &amp;gt; precision) { const double mid = (hi + lo) / 2; if (lim &amp;lt; f(mid)) hi = mid; // Search in left half  else lo = mid; // Search in right half  } return lo; }</description>
    </item>
    
  </channel>
</rss>
