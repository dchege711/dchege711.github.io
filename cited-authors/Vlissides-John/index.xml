<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Vlissides, John on Chege's Blog</title><link>https://www.curiosities.dev/cited-authors/Vlissides-John/</link><description>Recent content in Vlissides, John on Chege's Blog</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Thu, 30 Mar 2023 00:00:00 +0000</lastBuildDate><atom:link href="https://www.curiosities.dev/cited-authors/Vlissides-John/index.xml" rel="self" type="application/rss+xml"/><item><title>Intro to Design Patterns</title><link>https://www.curiosities.dev/computer-science/gang-of-four-design-patterns/intro-to-design-patterns/</link><pubDate>Thu, 30 Mar 2023 00:00:00 +0000</pubDate><guid>https://www.curiosities.dev/computer-science/gang-of-four-design-patterns/intro-to-design-patterns/</guid><description>What Are Design Patterns? Arriving at designs that are specific to the problem at hand but general enough to address future problems and requirements is hard. New designers tend to be overwhelmed by the options available. Expert designers do not solve every problem from first principles; they reuse design patterns.
I&amp;rsquo;ve also encountered the &amp;ldquo;you aren&amp;rsquo;t gonna need it&amp;rdquo; (YAGNI) school of thought that aims to minimize writing code that anticipates too far into the future, as such guesses usually don&amp;rsquo;t pan out.</description></item><item><title>Design Patterns: Elements of Reusable Object-Oriented Software</title><link>https://www.curiosities.dev/computer-science/gang-of-four-design-patterns/</link><pubDate>Fri, 21 Oct 1994 00:00:00 +0000</pubDate><guid>https://www.curiosities.dev/computer-science/gang-of-four-design-patterns/</guid><description>Design Patterns: Elements of Reusable Object-Oriented Software. Erich Gamma; Richard Helm; Ralph Johnson; John Vlissides. Oct 21, 1994. One of the classics in object-oriented software. A good deal of software engineers seem to have read it, so I should too. Some parts might be dated, but the book should give me some common terminologies and frameworks when working with an object-oriented language. I&amp;rsquo;ll try to tie these back to the Chromium code-base, as it&amp;rsquo;s pretty modern and highly active.</description></item><item><title>Observer</title><link>https://www.curiosities.dev/computer-science/gang-of-four-design-patterns/behavioral-patterns/07-observer/</link><pubDate>Tue, 28 Sep 2021 00:00:00 +0000</pubDate><guid>https://www.curiosities.dev/computer-science/gang-of-four-design-patterns/behavioral-patterns/07-observer/</guid><description>notes that , the primary source, glosses over nitty-gritties. e.g. the &amp;ldquo;message queue&amp;rdquo; server. Maybe reading through these will provide a larger perspective to design decisions made in Chromium regarding observers.
Rant: some of willchan&amp;rsquo;s thoughts on WeakPtr, for those who care to read criticizes the observer pattern for murking dependency chains. Investigate more in this regard.
Intent A one-to-many dependency between object so that when one object (subject) changes, all its dependents (observers) are notified and update automatically.</description></item></channel></rss>