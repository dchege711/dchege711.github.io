<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Software Engineering on c13u&#39;s Blog</title>
    <link>https://www.c13u.com/tags/software-engineering/</link>
    <description>Recent content in Software Engineering on c13u&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sat, 21 Mar 2020 00:00:00 +0000</lastBuildDate><atom:link href="https://www.c13u.com/tags/software-engineering/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>New grad vs senior dev [Eric Lipppert]</title>
      <link>https://www.c13u.com/computer-science/2020-03-27-new-grad-vs-senior-dev/</link>
      <pubDate>Fri, 27 Mar 2020 00:00:00 +0000</pubDate>
      
      <guid>https://www.c13u.com/computer-science/2020-03-27-new-grad-vs-senior-dev/</guid>
      <description>New grad vs senior dev.  Eric Lipppert. Fabulous adventures in coding. https://ericlippert.com/2020/03/27/new-grad-vs-senior-dev/ . https://news.ycombinator.com/item?id=22352674 . Mar 27, 2020.  Substring Search in Visual Basic In CS, substring search is a foundational problem for which there are \(O(m + n)\) algorithms. But VB&amp;rsquo;s implementation was \(O(mn)\). Suppose we have InStr(&amp;quot;apple banana orange&amp;quot;, &amp;quot;banana&amp;quot;):
 Skip to the first b. Check if banana is a substring starting from that b. If banana was not found, skip to the next b.</description>
    </item>
    
    <item>
      <title>The Missing Semester of your CS Education [MIT]</title>
      <link>https://www.c13u.com/computer-science/the-missing-cs-semester/_meta/</link>
      <pubDate>Sun, 09 Feb 2020 00:00:00 +0000</pubDate>
      
      <guid>https://www.c13u.com/computer-science/the-missing-cs-semester/_meta/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Designing Data-Intensive Applications [Kleppmann, Martin]</title>
      <link>https://www.c13u.com/computer-science/klepmann-ddia/_meta/</link>
      <pubDate>Thu, 16 Mar 2017 00:00:00 +0000</pubDate>
      
      <guid>https://www.c13u.com/computer-science/klepmann-ddia/_meta/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Mythical Man Month [Brooks, Jr., Frederick P]</title>
      <link>https://www.c13u.com/computer-science/mythical-man-month/_meta/</link>
      <pubDate>Tue, 01 Oct 1974 00:00:00 +0000</pubDate>
      
      <guid>https://www.c13u.com/computer-science/mythical-man-month/_meta/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Writing for Software Development</title>
      <link>https://www.c13u.com/writing/2021-01-03-writing-for-software-development/</link>
      <pubDate>Sun, 03 Jan 2021 00:00:00 +0000</pubDate>
      
      <guid>https://www.c13u.com/writing/2021-01-03-writing-for-software-development/</guid>
      <description>MUST and MUST NOT; On Writing Documentation []   Revise documentation, many times, and on separate days to catch confusing parts.
  Beware of ambiguities, e.g. X may not do Y. Refer to definitions, e.g. RFC 2119  .
  Put yourself into different roles, e.g. the person just looking for samples, the person who wants to read up on every nook and crany, the person who has no technical background etc.</description>
    </item>
    
    <item>
      <title>Software Vulnerabilities Introduced by Dependencies</title>
      <link>https://www.c13u.com/computer-science/2020-11-14-vulnerabilities-through-deps/</link>
      <pubDate>Sat, 14 Nov 2020 00:00:00 +0000</pubDate>
      
      <guid>https://www.c13u.com/computer-science/2020-11-14-vulnerabilities-through-deps/</guid>
      <description>Identifying Vulnerabilities No matter the obfuscation in the source code, the malicious package will have to make system calls in order to do anything interesting. These system calls are easier to analyze. []
Suggestions Know your dependencies by heart. Know the maintainers. Be aware of problems going on in the project and help, e.g. patches, funding sources, etc. []
References   Hunting for Malicious Packages on PyPI.  Jordan Wright.</description>
    </item>
    
    <item>
      <title>On Distributed Systems</title>
      <link>https://www.c13u.com/computer-science/2020-05-17-distributed-systems/</link>
      <pubDate>Sun, 17 May 2020 00:00:00 +0000</pubDate>
      
      <guid>https://www.c13u.com/computer-science/2020-05-17-distributed-systems/</guid>
      <description>Mergeable Replicated Data Types [] On a distributed system, each replica should [eventually] converge to the same state. Commutative Replicated Data Types (CRDTs) can accept updates and achieve consistent without remote synchronization.
The Need for Commutativity Say we have a queue \( 1 \to 2 \). Suppose two replicas, \(r_1\) and \(r_2\), independently call pop(). Each replica will have \(2\) on their queue.
However, on receiving an update that the other replica popped, each replica will call pop() to be consistent, thereby deleting \(2\).</description>
    </item>
    
  </channel>
</rss>
