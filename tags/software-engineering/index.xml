<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Software Engineering on Chege&#39;s Blog</title>
    <link>https://www.curiosities.dev/tags/software-engineering/</link>
    <description>Recent content in Software Engineering on Chege&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sat, 21 Mar 2020 00:00:00 +0000</lastBuildDate><atom:link href="https://www.curiosities.dev/tags/software-engineering/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>The Missing Semester of your CS Education [MIT]</title>
      <link>https://www.curiosities.dev/computer-science/the-missing-cs-semester/_meta/</link>
      <pubDate>Sun, 09 Feb 2020 00:00:00 +0000</pubDate>
      
      <guid>https://www.curiosities.dev/computer-science/the-missing-cs-semester/_meta/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Designing Data-Intensive Applications [Book]</title>
      <link>https://www.curiosities.dev/computer-science/klepmann-ddia/</link>
      <pubDate>Thu, 16 Mar 2017 00:00:00 +0000</pubDate>
      
      <guid>https://www.curiosities.dev/computer-science/klepmann-ddia/</guid>
      <description> Designing Data-Intensive Applications: The big ideas behind reliable, scalable, and maintainable systems.  Kleppmann, Martin. Mar 16, 2017.  </description>
    </item>
    
    <item>
      <title>Designing Data-Intensive Applications [Kleppmann, Martin]</title>
      <link>https://www.curiosities.dev/computer-science/klepmann-ddia/_meta/</link>
      <pubDate>Thu, 16 Mar 2017 00:00:00 +0000</pubDate>
      
      <guid>https://www.curiosities.dev/computer-science/klepmann-ddia/_meta/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Mythical Man Month [Brooks, Jr., Frederick P]</title>
      <link>https://www.curiosities.dev/computer-science/mythical-man-month/_meta/</link>
      <pubDate>Tue, 01 Oct 1974 00:00:00 +0000</pubDate>
      
      <guid>https://www.curiosities.dev/computer-science/mythical-man-month/_meta/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Information Retrieval Medley</title>
      <link>https://www.curiosities.dev/computer-science/2021-01-03-information-retrieval-medley/</link>
      <pubDate>Sun, 03 Jan 2021 00:00:00 +0000</pubDate>
      
      <guid>https://www.curiosities.dev/computer-science/2021-01-03-information-retrieval-medley/</guid>
      <description>Pagination with Relative Cursors  Exposing pagination through URLs like example.com/items?page=25&amp;amp;limit=100 leads to SQL like SELECT * from &#39;items&#39; LIMIT 100 OFFSET 2400;, which inefficiently goes through 2,500 records and discards the first 2,400.
With relative cursors, we have URLs like example.com/items?limit=50&amp;amp;lastID=XXX, which leads to SQL like SELECT * from &#39;items&#39; WHERE &#39;id&#39; &amp;gt; XXX ORDER BY &#39;id&#39; ASC LIMIT 50, and this is more efficient, assuming there are indexes for id.</description>
    </item>
    
    <item>
      <title>Writing for Software Development</title>
      <link>https://www.curiosities.dev/writing/2021-01-03-writing-for-software-development/</link>
      <pubDate>Sun, 03 Jan 2021 00:00:00 +0000</pubDate>
      
      <guid>https://www.curiosities.dev/writing/2021-01-03-writing-for-software-development/</guid>
      <description>MUST and MUST NOT; On Writing Documentation    Revise documentation, many times, and on separate days to catch confusing parts.
  Beware of ambiguities, e.g. X may not do Y. Refer to definitions, e.g. RFC 2119   .
  Put yourself into different roles, e.g. the person just looking for samples, the person who wants to read up on every nook and crany, the person who has no technical background etc.</description>
    </item>
    
    <item>
      <title>Software Vulnerabilities Introduced by Dependencies</title>
      <link>https://www.curiosities.dev/computer-science/2020-11-14-vulnerabilities-through-deps/</link>
      <pubDate>Sat, 14 Nov 2020 00:00:00 +0000</pubDate>
      
      <guid>https://www.curiosities.dev/computer-science/2020-11-14-vulnerabilities-through-deps/</guid>
      <description>Identifying Vulnerabilities No matter the obfuscation in the source code, the malicious package will have to make system calls in order to do anything interesting. These system calls are easier to analyze. 
Suggestions Know your dependencies by heart. Know the maintainers. Be aware of problems going on in the project and help, e.g. patches, funding sources, etc. 
References   Hunting for Malicious Packages on PyPI.  Jordan Wright.</description>
    </item>
    
    <item>
      <title>On Distributed Systems</title>
      <link>https://www.curiosities.dev/computer-science/2020-05-17-distributed-systems/</link>
      <pubDate>Sun, 17 May 2020 00:00:00 +0000</pubDate>
      
      <guid>https://www.curiosities.dev/computer-science/2020-05-17-distributed-systems/</guid>
      <description>Mergeable Replicated Data Types  On a distributed system, each replica should [eventually] converge to the same state. Commutative Replicated Data Types (CRDTs) can accept updates and achieve consistent without remote synchronization.
The Need for Commutativity Say we have a queue \( 1 \to 2 \). Suppose two replicas, \(r_1\) and \(r_2\), independently call pop(). Each replica will have \(2\) on their queue.
However, on receiving an update that the other replica popped, each replica will call pop() to be consistent, thereby deleting \(2\).</description>
    </item>
    
    <item>
      <title>Computer Science &amp; Software Engineering</title>
      <link>https://www.curiosities.dev/computer-science/</link>
      <pubDate>Tue, 01 Oct 1974 00:00:00 +0000</pubDate>
      
      <guid>https://www.curiosities.dev/computer-science/</guid>
      <description>Brashly stroked, computer science is what I learned in school, and software engineering is what I encounter in the &amp;lsquo;real world&amp;rsquo;. The boundary is blurry, so let&amp;rsquo;s have them all in place.</description>
    </item>
    
  </channel>
</rss>
