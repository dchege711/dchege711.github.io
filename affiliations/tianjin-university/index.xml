<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Tianjin University on Chege&#39;s Blog</title>
    <link>https://www.curiosities.dev/affiliations/tianjin-university/</link>
    <description>Recent content in Tianjin University on Chege&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sat, 15 Jan 2022 00:00:00 +0000</lastBuildDate><atom:link href="https://www.curiosities.dev/affiliations/tianjin-university/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Software Engineering Journal Reviews</title>
      <link>https://www.curiosities.dev/computer-science/2022-01-16-swe-journal-reviews/</link>
      <pubDate>Sat, 15 Jan 2022 00:00:00 +0000</pubDate>
      
      <guid>https://www.curiosities.dev/computer-science/2022-01-16-swe-journal-reviews/</guid>
      <description>Formal Software Design Alloy is an open-source language and analyzer for software modeling. An Alloy model is a collection of constraints that describe a set of structures, e.g. all possible security configurations of a web application. Alloy&amp;rsquo;s tool, the Alloy Analyzer is a solver that takes the constraints of a model and finds structures that satisfy them. 
ðŸ“‘    The Alloy Analyzer leverages a SAT solver, and this precludes Alloy from analyzing optimization problems.</description>
    </item>
    
    <item>
      <title>Software Dependencies</title>
      <link>https://www.curiosities.dev/computer-science/2020-11-14-software-dependencies/</link>
      <pubDate>Sat, 14 Nov 2020 00:00:00 +0000</pubDate>
      
      <guid>https://www.curiosities.dev/computer-science/2020-11-14-software-dependencies/</guid>
      <description>Bloated Dependencies A bloated dependency is one which is packaged in the application binary, but is not needed to run the application.
There are two levels to this: (1) a source file declares a dependency on foo but never actually uses foo, and (2) the application as a whole never uses foo. An optimal de-bloating solution would first address (1) and then tackle (2).
Some languages may have better tooling than others when it comes to automatically de-bloating their dependencies.</description>
    </item>
    
  </channel>
</rss>
