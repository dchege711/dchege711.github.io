<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Tianjin University on Chege&#39;s Blog</title>
    <link>https://www.curiosities.dev/affiliations/Tianjin-University/</link>
    <description>Recent content in Tianjin University on Chege&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sat, 02 Jul 2022 00:00:00 +0000</lastBuildDate><atom:link href="https://www.curiosities.dev/affiliations/Tianjin-University/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Debugging</title>
      <link>https://www.curiosities.dev/computer-science/debugging/</link>
      <pubDate>Sat, 02 Jul 2022 00:00:00 +0000</pubDate>
      
      <guid>https://www.curiosities.dev/computer-science/debugging/</guid>
      <description>Debugging 101 Definition? Debugging involves inspecting a program&amp;rsquo;s internal state.
  printf Debugging and Logging In printf debugging, one adds print statements and keeps iterating until enough information has been extracted. 
Using logging has several advantages over printf debugging: varying logging destinations (e.g. standard output, files, sockets, remote servers, etc.); severity levels (e.g. INFO, DEBUG, WARN, ERROR, &amp;amp;c) that support filtering of output; color-coding for readability. 
Terminals have varying levels of color support: plain color; ANSI escape codes (16 color codes with bold/italic and background); 256 color palette; 24-bit truecolor (&amp;ldquo;888&amp;rdquo; colors, aka 16 million, e.</description>
    </item>
    
    <item>
      <title>Software Dependencies</title>
      <link>https://www.curiosities.dev/computer-science/2020-11-14-software-dependencies/</link>
      <pubDate>Sat, 14 Nov 2020 00:00:00 +0000</pubDate>
      
      <guid>https://www.curiosities.dev/computer-science/2020-11-14-software-dependencies/</guid>
      <description>Dependency Management Golang introduced a new library referencing mode to overcome limitations of the old one. While the two library modes are supported by Golang, they are incompatible, e.g. dependency management (DM) issues, reference inconsistencies, build failures, etc.  did an empirical study that resulted in HERO, an automated technique to detect DM issues and suggest fixes. Applied to 19k Golang projects, HERO detected 98.5% on a DM issue benchmark, and found 2,422 new DM issues in 2,356 Golang projects.</description>
    </item>
    
  </channel>
</rss>
