<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Stroustrup, Bjarne on Chege&#39;s Blog</title>
    <link>https://www.curiosities.dev/authors/Stroustrup-Bjarne/</link>
    <description>Recent content in Stroustrup, Bjarne on Chege&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sat, 04 Jun 2022 00:00:00 +0000</lastBuildDate><atom:link href="https://www.curiosities.dev/authors/Stroustrup-Bjarne/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>User-Defined Types</title>
      <link>https://www.curiosities.dev/computer-science/programming-challenges/language-concepts/type-systems/user-defined-types/</link>
      <pubDate>Sat, 04 Jun 2022 00:00:00 +0000</pubDate>
      
      <guid>https://www.curiosities.dev/computer-science/programming-challenges/language-concepts/type-systems/user-defined-types/</guid>
      <description>Definition from C++ Built-in types are ones that can be built from the fundamental types (e.g. void, std::nullptr_t, int, bool, char, float, double ), the const modifier, and the declarator operators (e.g. int[3], int*, int&amp;amp;). 
While the built-in types directly and efficiently represent the capabilities of conventional computer hardware, they&amp;rsquo;re too low-level to conveniently write advanced applications in. C++ abstraction mechanisms let programmers design and implement user-defined types using both built-in types and other user-defined types.</description>
    </item>
    
    <item>
      <title>Classes in C&#43;&#43;</title>
      <link>https://www.curiosities.dev/computer-science/programming-challenges/language-concepts/type-systems/user-defined-types/classes-in-cpp/</link>
      <pubDate>Thu, 12 May 2022 00:00:00 +0000</pubDate>
      
      <guid>https://www.curiosities.dev/computer-science/programming-challenges/language-concepts/type-systems/user-defined-types/classes-in-cpp/</guid>
      <description>quotes Doug McIlroy:
 Those types are not &amp;ldquo;abstract&amp;rdquo;; they are as real as int and float.
 What is the context of this quote?
  A class is a user-defined type provided to represent a concept in the code of a program. Essentially, all language facilities beyond the fundamental types, operators, and statements exist to help define better class or to use them more conveniently.</description>
    </item>
    
    <item>
      <title>Structures in C&#43;&#43;</title>
      <link>https://www.curiosities.dev/computer-science/programming-challenges/language-concepts/type-systems/user-defined-types/structures-in-cpp/</link>
      <pubDate>Sat, 04 Jun 2022 00:00:00 +0000</pubDate>
      
      <guid>https://www.curiosities.dev/computer-science/programming-challenges/language-concepts/type-systems/user-defined-types/structures-in-cpp/</guid>
      <description>A struct helps us organize the elements that a type needs into a data structure, e.g.
struct Vector { int sz; // number of elements  double* elem; // pointer to elements on the free store }; void vector_init(Vector&amp;amp; v, int s) { v.elem = new double[s]; v.sz = s; } 
However, notice that a user of Vector has to know every detail of a Vector&amp;rsquo;s representation. We can improve on this.</description>
    </item>
    
    <item>
      <title>Resource Management</title>
      <link>https://www.curiosities.dev/computer-science/programming-challenges/language-concepts/resource-management/</link>
      <pubDate>Tue, 31 May 2022 00:00:00 +0000</pubDate>
      
      <guid>https://www.curiosities.dev/computer-science/programming-challenges/language-concepts/resource-management/</guid>
      <description>A resource is something that must be acquired, and later (explicitly or implicitly) released. Examples include memory, locks, sockets, thread handles, and file handles. 
In a long-running program, failing to release a resource may degrade performance or even crash.  Worse still, one may introduce security bugs, e.g. use-after-free.
A Tour of C&amp;#43;&amp;#43; (Second Edition). Chapter 13. Utilities.  Bjarne Stroustrup. 2018. ISBN: 978-0-13-499783-4 .   </description>
    </item>
    
    <item>
      <title>Enumerations in C&#43;&#43;</title>
      <link>https://www.curiosities.dev/computer-science/programming-challenges/language-concepts/type-systems/user-defined-types/enumerations-in-cpp/</link>
      <pubDate>Sat, 04 Jun 2022 00:00:00 +0000</pubDate>
      
      <guid>https://www.curiosities.dev/computer-science/programming-challenges/language-concepts/type-systems/user-defined-types/enumerations-in-cpp/</guid>
      <description>Unscoped (or Plain or C-Style) Enumerations Plain (or C-style) enums are entered in the same scope as the name of their enum, and implicitly convert to their integer value, e.g.
enum Color { red, green, blue }; int col = green; enum CardColor { red, black }; // Error: &amp;#34;red&amp;#34; conflicts with a previous declaration 
The name can be omitted if it&amp;rsquo;s not going to be used, e.g.
enum { red, green, blue }; int col = red;</description>
    </item>
    
    <item>
      <title>Unions in C&#43;&#43;</title>
      <link>https://www.curiosities.dev/computer-science/programming-challenges/language-concepts/type-systems/user-defined-types/unions-in-cpp/</link>
      <pubDate>Sat, 04 Jun 2022 00:00:00 +0000</pubDate>
      
      <guid>https://www.curiosities.dev/computer-science/programming-challenges/language-concepts/type-systems/user-defined-types/unions-in-cpp/</guid>
      <description>A union is a struct in which all members are allocated at the same address so that the union occupies as much space as its largest member, e.g.
// This is a naked union because it doesn&amp;#39;t have an associated indicator // for which member it holds. union Value { Node* p; int i; } // The language doesn&amp;#39;t keep track of which kind of value is held by a // union, so the programmer must do that themselves, e.</description>
    </item>
    
    <item>
      <title>Resource Management in C&#43;&#43;</title>
      <link>https://www.curiosities.dev/computer-science/programming-challenges/language-concepts/resource-management/resource-management-cpp/</link>
      <pubDate>Tue, 31 May 2022 00:00:00 +0000</pubDate>
      
      <guid>https://www.curiosities.dev/computer-science/programming-challenges/language-concepts/resource-management/resource-management-cpp/</guid>
      <description>Resource Handles RAII is also covered in Classes in C++ &amp;gt; Motivation for the Destructor Mechanism    The constructor/destructor pattern enables objects defined in a scope to release the resources during exit from the scope, even when exceptions are thrown. All standard-library containers, e.g. std::vector, are implemented as resource handles. 
std::unique_ptr and std::shared_ptr These &amp;ldquo;smart pointers&amp;rdquo; are useful in managing objects that are allocated on the free store (as opposed to those allocated on the stack).</description>
    </item>
    
    <item>
      <title>Templates in C&#43;&#43;</title>
      <link>https://www.curiosities.dev/computer-science/programming-challenges/language-concepts/parameterization/templates-cpp/</link>
      <pubDate>Mon, 30 May 2022 00:00:00 +0000</pubDate>
      
      <guid>https://www.curiosities.dev/computer-science/programming-challenges/language-concepts/parameterization/templates-cpp/</guid>
      <description>A template is a class or a function that we can parameterize with a set of types or values. 
Parameterized Types The vector-of-doubles   can be generalized to a vector-of-anything type by making it a template:
// `template&amp;lt;typename T&amp;gt;` can be read as &amp;#34;for all types T&amp;#34;. Older code // uses `template&amp;lt;class T&amp;gt;`, which is equivalent. template&amp;lt;typename T&amp;gt; class Vector { public: explicit Vector(int s); ~Vector() { delete[] elem; } // .</description>
    </item>
    
  </channel>
</rss>
