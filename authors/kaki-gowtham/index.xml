<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Kaki, Gowtham on Chege&#39;s Blog</title>
    <link>https://www.curiosities.dev/authors/Kaki-Gowtham/</link>
    <description>Recent content in Kaki, Gowtham on Chege&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 17 May 2020 00:00:00 +0000</lastBuildDate><atom:link href="https://www.curiosities.dev/authors/Kaki-Gowtham/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>On Distributed Systems</title>
      <link>https://www.curiosities.dev/computer-science/2020-05-17-distributed-systems/</link>
      <pubDate>Sun, 17 May 2020 00:00:00 +0000</pubDate>
      
      <guid>https://www.curiosities.dev/computer-science/2020-05-17-distributed-systems/</guid>
      <description>Mergeable Replicated Data Types  On a distributed system, each replica should [eventually] converge to the same state. Commutative Replicated Data Types (CRDTs) can accept updates and achieve consistent without remote synchronization.
The Need for Commutativity Say we have a queue \( 1 \to 2 \). Suppose two replicas, \(r_1\) and \(r_2\), independently call pop(). Each replica will have \(2\) on their queue.
However, on receiving an update that the other replica popped, each replica will call pop() to be consistent, thereby deleting \(2\).</description>
    </item>
    
  </channel>
</rss>
