<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>DeVault, Drew on Chege&#39;s Blog</title>
    <link>https://www.curiosities.dev/authors/devault-drew/</link>
    <description>Recent content in DeVault, Drew on Chege&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sat, 14 Nov 2020 00:00:00 +0000</lastBuildDate><atom:link href="https://www.curiosities.dev/authors/devault-drew/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Software Vulnerabilities Introduced by Dependencies</title>
      <link>https://www.curiosities.dev/computer-science/2020-11-14-vulnerabilities-through-deps/</link>
      <pubDate>Sat, 14 Nov 2020 00:00:00 +0000</pubDate>
      
      <guid>https://www.curiosities.dev/computer-science/2020-11-14-vulnerabilities-through-deps/</guid>
      <description>Identifying Vulnerabilities No matter the obfuscation in the source code, the malicious package will have to make system calls in order to do anything interesting. These system calls are easier to analyze. 
Suggestions Know your dependencies by heart. Know the maintainers. Be aware of problems going on in the project and help, e.g. patches, funding sources, etc. 
References   Hunting for Malicious Packages on PyPI.  Jordan Wright.</description>
    </item>
    
  </channel>
</rss>
