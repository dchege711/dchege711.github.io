<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Lent, Monica on Chege&#39;s Blog</title>
    <link>https://www.curiosities.dev/authors/Lent-Monica/</link>
    <description>Recent content in Lent, Monica on Chege&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sat, 11 Jun 2022 00:00:00 +0000</lastBuildDate><atom:link href="https://www.curiosities.dev/authors/Lent-Monica/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Testing Your Code</title>
      <link>https://www.curiosities.dev/computer-science/2022-06-11-testing-your-code/</link>
      <pubDate>Sat, 11 Jun 2022 00:00:00 +0000</pubDate>
      
      <guid>https://www.curiosities.dev/computer-science/2022-06-11-testing-your-code/</guid>
      <description>Why Write Tests Helps catch bugs in the code, and in the programmer&amp;rsquo;s mental model of what the code does. 
  The later a bug is caught in the development cycle, the more expensive it is to fix it. A good test today is a future debugging session saved. 
The test is the first client of your code. It uncovers sub-optimal design choices, tight couplings, missed cases, etc.</description>
    </item>
    
    <item>
      <title>Perspectives on Software Engineering</title>
      <link>https://www.curiosities.dev/computer-science/2022-06-06-perspectives-on-swe/</link>
      <pubDate>Mon, 06 Jun 2022 00:00:00 +0000</pubDate>
      
      <guid>https://www.curiosities.dev/computer-science/2022-06-06-perspectives-on-swe/</guid>
      <description>On the Clean Code Movement Good enough is good enough. The architectural choices and bugs in the implementation tend to be more impactful, so focus more on those. 
Be conservative in what you consider technical debt. It should be something that slows down current/future changes, and not code that doesn&amp;rsquo;t &amp;ldquo;feel nice&amp;rdquo;. A code base that is free if technical debt is likely over-emphasizing polish over delivery. 
Abstractions and indirections in the name of future-proofing tend to be wrong especially when treading new paths, where you can&amp;rsquo;t reliably predict the future.</description>
    </item>
    
  </channel>
</rss>
