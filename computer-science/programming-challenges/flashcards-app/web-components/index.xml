<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Using Web Components on Chege's Blog</title><link>https://www.curiosities.dev/computer-science/programming-challenges/flashcards-app/web-components/</link><description>Recent content in Using Web Components on Chege's Blog</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Thu, 18 Apr 2024 00:00:00 +0000</lastBuildDate><atom:link href="https://www.curiosities.dev/computer-science/programming-challenges/flashcards-app/web-components/index.xml" rel="self" type="application/rss+xml"/><item><title>Wiki Page</title><link>https://www.curiosities.dev/computer-science/programming-challenges/flashcards-app/web-components/wiki-page/</link><pubDate>Thu, 18 Apr 2024 00:00:00 +0000</pubDate><guid>https://www.curiosities.dev/computer-science/programming-challenges/flashcards-app/web-components/wiki-page/</guid><description>Overview Starting with this page because it&amp;rsquo;s mostly static. The body is basically:
&amp;lt;div class=&amp;#34;topnav&amp;#34;&amp;gt;...&amp;lt;/div&amp;gt; &amp;lt;div id=&amp;#34;main_div&amp;#34;&amp;gt; &amp;lt;div id=&amp;#34;study_buddy_details&amp;#34;&amp;gt; &amp;lt;div class=&amp;#34;details_section&amp;#34;&amp;gt;...&amp;lt;/div&amp;gt; &amp;lt;div class=&amp;#34;details_section&amp;#34;&amp;gt;...&amp;lt;/div&amp;gt; ... &amp;lt;div class=&amp;#34;details_section&amp;#34;&amp;gt;...&amp;lt;/div&amp;gt; &amp;lt;/div&amp;gt; &amp;lt;/div&amp;gt; &amp;lt;footer&amp;gt;...&amp;lt;/footer&amp;gt; The corresponding web components would be something along the lines of:
&amp;lt;nav-bar&amp;gt;&amp;lt;/nav-bar&amp;gt; &amp;lt;wiki-container&amp;gt; {Table of Contents} &amp;lt;wiki-section&amp;gt;&amp;lt;/wiki-section&amp;gt; &amp;lt;wiki-section&amp;gt;&amp;lt;/wiki-section&amp;gt; &amp;lt;/wiki-container&amp;gt; &amp;lt;wiki-container&amp;gt; Maybe &amp;lt;wiki-section&amp;gt; can be a template owned by &amp;lt;wiki-container&amp;gt;? Nah, there are benefits to a separate &amp;lt;wiki-section&amp;gt; component, e.g., each component can define its title for use in the ToC.</description></item><item><title>App Layout</title><link>https://www.curiosities.dev/computer-science/programming-challenges/flashcards-app/web-components/app-layout/</link><pubDate>Fri, 19 Apr 2024 00:00:00 +0000</pubDate><guid>https://www.curiosities.dev/computer-science/programming-challenges/flashcards-app/web-components/app-layout/</guid><description>Is there a use-case for the container that lays out the various app elements? When considering a &amp;lt;nav-bar&amp;gt; , the conclusion was that a web component wasn&amp;rsquo;t necessary.
Possible Organization The high-level picture is:
&amp;lt;body&amp;gt; &amp;lt;nav&amp;gt; &amp;lt;div id=&amp;#34;topnav-banner&amp;#34;&amp;gt;...&amp;lt;/div&amp;gt; &amp;lt;ul id=&amp;#34;topnav-items&amp;#34;&amp;gt;...&amp;lt;/ul&amp;gt; &amp;lt;/nav&amp;gt; &amp;lt;div id=&amp;#34;main_div&amp;#34;&amp;gt;...&amp;lt;/div&amp;gt; &amp;lt;footer&amp;gt;...&amp;lt;/footer&amp;gt; &amp;lt;/body&amp;gt; We should move #topnav-banner out of the &amp;lt;nav&amp;gt; so that we can potentially apply lateral spacing to #topnav-items and #main_div without it applying to #topnav-banner.</description></item><item><title>Browse Page</title><link>https://www.curiosities.dev/computer-science/programming-challenges/flashcards-app/web-components/browse-page/</link><pubDate>Sat, 20 Apr 2024 00:00:00 +0000</pubDate><guid>https://www.curiosities.dev/computer-science/programming-challenges/flashcards-app/web-components/browse-page/</guid><description>When a user lands at /browse, this UI is shown. A couple of components seem to emerge: search-bar, tags-list, card-results, and mini-card.
&amp;lt;search-bar&amp;gt; Currently, this is rendered by search_bar_dropdown.ejs, a partial that that is included in both /home and /browse. The fact that there it has JS, no server-delivered content, and has CSS makes it a good candidate for a web component. Revving up search-bar.ts.
Ran into Uncaught TypeError: Class constructor s cannot be invoked without 'new' on the export class SearchBar extends LitElement line.</description></item><item><title>The Cards Manager</title><link>https://www.curiosities.dev/computer-science/programming-challenges/flashcards-app/web-components/cards-manager/</link><pubDate>Sun, 28 Apr 2024 00:00:00 +0000</pubDate><guid>https://www.curiosities.dev/computer-science/programming-challenges/flashcards-app/web-components/cards-manager/</guid><description>UI Design Legacy card viewing UI at /browse.
This time we&amp;rsquo;ll use the more semantic and a11y-friendly &amp;lt;dialog&amp;gt; element . Centering it in the page is done by the browser, and that saves us a bit of hassle &amp;ndash; thought it would have been feasible with how &amp;lt;search-bar&amp;gt;&amp;rsquo;s &amp;lt;ul&amp;gt; floats above the page.
CardsManager Interface The previous/next buttons make use of the CardsManager object that has the API:</description></item><item><title>Reusable Cards</title><link>https://www.curiosities.dev/computer-science/programming-challenges/flashcards-app/web-components/reusable-cards/</link><pubDate>Fri, 03 May 2024 00:00:00 +0000</pubDate><guid>https://www.curiosities.dev/computer-science/programming-challenges/flashcards-app/web-components/reusable-cards/</guid><description>Context How can I reuse code in these user experiences?
Current card templates. TL: editable card owned by the user. TR: the overall modal experience. BL: a publicly viewable card. BR: a card owned by the user but is in the trash.
The current API surface for the different types of UIs is:
interface EditableCardViewer { displayNewCard(): void; displayFullCard(cardId: string): void; renderCard(card: Partial&amp;lt;ICard&amp;gt; | null): void; fetchCard(caller: () =&amp;gt; Promise&amp;lt;Partial&amp;lt;ICard&amp;gt; | null&amp;gt;): void; fetchPreviousCard(): void; fetchNextCard(): void; updateStreakBar(streak: IStreak): void; handleInputChange(elementId: string): void; handleCardUrgencyChange(): void; handleTagsInputChange(ev: KeyboardEvent): void; displayRawCardDescription(): void; insertTabsIfNecessary(ev: KeyboardEvent): void; saveCard(renderAfterSave: Boolean = true): void; moveCardToTrash(): void; restoreCardFromTrash(cardId: string, cardUrgency: number): void; toggleOption(elementId: &amp;#34;reviewModeToggle&amp;#34; | &amp;#34;card_is_public_toggle&amp;#34;): void; makeInvisible(elementId: string): void; colorUrgencyQuartiles(quartiles: number[]): void; suggestNewTags(tagsInputElement: HTMLInputElement): void; removeTagSuggestions(): void; updateTagsButtons(newTag: string): void; removeTagFromCard(tag: string): void; } interface PublicCardViewer { displayFullCard(cardId: string): void; renderCard(card: Partial&amp;lt;ICard&amp;gt; | null): void; fetchPreviousCard(): void; fetchNextCard(): void; handleSearchInputChange(): void; flagCard(reason: &amp;#34;markedForReview&amp;#34; | &amp;#34;markedAsDuplicate&amp;#34;): void; copyCardToOwnCollection(); } interface TrashedCardViewer { renderTrashedCard(card: Partial&amp;lt;ICard&amp;gt; | null); fetchPreviousCard(): void; fetchNextCard(): void; modifyTrash(endpoint: &amp;#34;/delete-card&amp;#34; | &amp;#34;/restore-from-trash&amp;#34;): void; } The web components v0 has:</description></item><item><title>Home Page</title><link>https://www.curiosities.dev/computer-science/programming-challenges/flashcards-app/web-components/home-page/</link><pubDate>Sun, 05 May 2024 00:00:00 +0000</pubDate><guid>https://www.curiosities.dev/computer-science/programming-challenges/flashcards-app/web-components/home-page/</guid><description>When a user lands at /home, this UI is shown. A couple of components are shareable from /browse, e.g., search-bar, search-results.
Sharing Code with /browse Components initially created for the /browse page are useful in /home as well.
The CardsViewingPage Interface This functionality can be shared between the two pages:
export class CardsViewingPage extends LitElement { @provide({ context: searchResultsContext }) @state() protected searchResults: CardSearchResult[] = []; @state() protected selectedResult: Card | null = null; @provide({ context: cardsCarouselContext }) @state() protected cardsCarousel = new CardsCarousel([]); protected cardFetcher: CardFetchEndpoint; constructor(cardFetcher: CardFetchEndpoint) { super(); this.</description></item></channel></rss>