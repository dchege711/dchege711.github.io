<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Flashcards App on Chege's Blog</title><link>https://www.curiosities.dev/computer-science/programming-challenges/flashcards-app/</link><description>Recent content in Flashcards App on Chege's Blog</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Wed, 27 Mar 2024 00:00:00 +0000</lastBuildDate><atom:link href="https://www.curiosities.dev/computer-science/programming-challenges/flashcards-app/index.xml" rel="self" type="application/rss+xml"/><item><title>Markup Features</title><link>https://www.curiosities.dev/computer-science/programming-challenges/flashcards-app/markup-features/</link><pubDate>Sat, 27 Apr 2024 00:00:00 +0000</pubDate><guid>https://www.curiosities.dev/computer-science/programming-challenges/flashcards-app/markup-features/</guid><description>Syntax Highlighting Previously, we&amp;rsquo;d highlight code on the client by loading src/lib/highlight.pack.js, a bundle downloaded from but served from our domain, and then execute hljs.highlightBlock on demand, e.g., on page load, when showing a card, etc. This doesn&amp;rsquo;t work well with a web-component-centric design. Running hljs.highlightBlock through possible Shadow DOM boundaries is a hassle.
Back in 2018 , we installed highlightjs, a shim for the official HighlightJS.</description></item><item><title>Of Builds and Bundlers</title><link>https://www.curiosities.dev/computer-science/programming-challenges/flashcards-app/of-builds-and-bundlers/</link><pubDate>Sat, 20 Apr 2024 00:00:00 +0000</pubDate><guid>https://www.curiosities.dev/computer-science/programming-challenges/flashcards-app/of-builds-and-bundlers/</guid><description>Moving to TypeScript entails configuring how the JavaScript will be eventually consumed by both the server and the client.
Separating the Client Bundle from the Server Bundle The server code runs in Node while the client code runs in the browser. advises separating the configurations for advantages like faster type-checking and compiling, lower memory usage when using an editor, and improved enforcement of the logical groupings of your program.</description></item><item><title>Client/Server Interface</title><link>https://www.curiosities.dev/computer-science/programming-challenges/flashcards-app/client-server-interface/</link><pubDate>Fri, 19 Apr 2024 00:00:00 +0000</pubDate><guid>https://www.curiosities.dev/computer-science/programming-challenges/flashcards-app/client-server-interface/</guid><description>How to handle redirects without setting window.location.href? Right now, there&amp;rsquo;s a pattern of doing:
sendHTTPRequest(&amp;#34;POST&amp;#34;, &amp;#34;/login/&amp;#34;, {}) .then((_) =&amp;gt; { window.location.href = &amp;#34;/&amp;#34;; }) .catch((err) =&amp;gt; { console.error(err); }); Isn&amp;rsquo;t this something that the server can do? In response, why not issue a redirect?
Screenshot of the redirect chain from /login. The POST request gets a 303 (See Other) redirect to /home. The browser then makes a GET request to /home, which results in a 304 (Not Modified).</description></item><item><title>Use of Local Storage</title><link>https://www.curiosities.dev/computer-science/programming-challenges/flashcards-app/use-of-local-storage/</link><pubDate>Thu, 18 Apr 2024 00:00:00 +0000</pubDate><guid>https://www.curiosities.dev/computer-science/programming-challenges/flashcards-app/use-of-local-storage/</guid><description>Back when I wrote this, the motivation for using localStorage was to reduce the trips to the server so that the app is usable offline. However, with two data stores (localStorage and the server), the former has a possibility of going stale. What usage is correct and how can we avoid stale data?
localStorage['session_info'] getAccountInfo: () =&amp;gt; AuthenticateUser | null fetches the session_info entry and JSON.parses it into an AuthenticateUser. This is a possible failure point because the parsed JSON cannot be trusted to be a valid AuthenticateUser instance.</description></item><item><title>Hosting the Flashcards App</title><link>https://www.curiosities.dev/computer-science/programming-challenges/flashcards-app/hosting/</link><pubDate>Wed, 27 Mar 2024 00:00:00 +0000</pubDate><guid>https://www.curiosities.dev/computer-science/programming-challenges/flashcards-app/hosting/</guid><description>Current State: SaaS The app is hosted at render.com on Render&amp;rsquo;s free tier that gives us these free web services:
Custom domains Managed TLS certificates Pull request reviews Log streams Rollbacks up to the two most recent previous deploys. &amp;hellip; with these limitations:
Spins down after 15min of no inbound traffic. Spinning up on the next request causes a noticeable delay for a couple seconds.</description></item></channel></rss>