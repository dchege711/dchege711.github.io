<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Project Euler on Chege's Blog</title><link>https://www.curiosities.dev/computer-science/programming-challenges/project_euler/</link><description>Recent content in Project Euler on Chege's Blog</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Fri, 07 Jan 2022 00:00:00 +0000</lastBuildDate><atom:link href="https://www.curiosities.dev/computer-science/programming-challenges/project_euler/index.xml" rel="self" type="application/rss+xml"/><item><title>019. Counting Sundays</title><link>https://www.curiosities.dev/computer-science/programming-challenges/project_euler/counting_sundays/019-counting-sundays/</link><pubDate>Fri, 07 Jan 2022 00:00:00 +0000</pubDate><guid>https://www.curiosities.dev/computer-science/programming-challenges/project_euler/counting_sundays/019-counting-sundays/</guid><description>Problem Statement You are given the following information, but you may prefer to do some research for yourself:
1 Jan 1900 was a Monday. Thirty days has September, April, June and November. All the rest have thirty-one, Saving February alone, Which has twenty-eight, rain or shine. And on leap years, twenty-nine. A leap year occurs on any year evenly divisible by 4, but not on a century unless it is divisible by 400.</description></item><item><title>020. Factorial Digit Sum</title><link>https://www.curiosities.dev/computer-science/programming-challenges/project_euler/factorial_digit_sum/020-factorial-digit-sum/</link><pubDate>Sat, 15 Jan 2022 00:00:00 +0000</pubDate><guid>https://www.curiosities.dev/computer-science/programming-challenges/project_euler/factorial_digit_sum/020-factorial-digit-sum/</guid><description>Problem Statement \(n!\) means \(n \times (n - 1) \times &amp;hellip; \times 3 \times 2 \times 1\).
For example, \(10! = 10 \times 9 \times &amp;hellip; \times 3 \times 2 \times 1 = 3628800\), and the sum of the digits in the number \(10!\) is \(3 + 6 + 2 + 8 + 8 + 0 + 0 = 27\).
Find the sum of the digits in the number \(100!</description></item><item><title>021. Amicable Numbers</title><link>https://www.curiosities.dev/computer-science/programming-challenges/project_euler/amicable_numbers/021-amicable-numbers/</link><pubDate>Sat, 06 Feb 2021 00:00:00 +0000</pubDate><guid>https://www.curiosities.dev/computer-science/programming-challenges/project_euler/amicable_numbers/021-amicable-numbers/</guid><description>Problem Statement Let \(d(n)\) be defined as the sum of proper divisors of \(n\) (numbers less than \(n\) which divide evenly into \(n\)).
If \(d(a) = b\) and \(d(b) = a\), where \(a \neq b\), then \(a\) and \(b\) are an amicable pair and each of \(a\) and \(b\) are called amicable numbers.
For example, the proper divisors of \(220\) are \(1, 2, 4, 5, 10, 11, 20, 22, 44, 55, 110\); therefore \(d(220) = 284\).</description></item><item><title>022. Name Scores</title><link>https://www.curiosities.dev/computer-science/programming-challenges/project_euler/name_scores/022-name-scores/</link><pubDate>Fri, 18 Feb 2022 00:00:00 +0000</pubDate><guid>https://www.curiosities.dev/computer-science/programming-challenges/project_euler/name_scores/022-name-scores/</guid><description>#22 Names scores - Project Euler. projecteuler.net . Accessed Feb 18, 2022. Problem Statement Using names.txt, a 46K text file containing over 5,000 first names, begin by sorting it into alphabetical order. Then working out the alphabetical value for each name, multiply this value by its alphabetical position in the list to obtain a name score.
For example, when the list is sorted into alphabetical order, COLIN, which is worth \(3 + 15 + 12 + 9 + 14 = 53\), is the 938th name in the list.</description></item><item><title>023. Non-Abundant Sums</title><link>https://www.curiosities.dev/computer-science/programming-challenges/project_euler/non_abundant_sums/023-non-abundant-sums/</link><pubDate>Sun, 19 Feb 2023 00:00:00 +0000</pubDate><guid>https://www.curiosities.dev/computer-science/programming-challenges/project_euler/non_abundant_sums/023-non-abundant-sums/</guid><description>#23 Non-abundant sums - Project Euler. projecteuler.net . Accessed Feb 19, 2023. Problem Statement A perfect number is a number for which the sum of its proper divisors is exactly equal to the number. For example, the sum of the proper divisors of \(28\) would be \(1 + 2 + 4 + 7 + 14 = 28\), which means that \(28\) is a perfect number.</description></item></channel></rss>