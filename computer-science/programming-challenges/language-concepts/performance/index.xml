<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Performance on Chege&#39;s Blog</title>
    <link>https://www.curiosities.dev/computer-science/programming-challenges/language-concepts/performance/</link>
    <description>Recent content in Performance on Chege&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 26 Jul 2022 00:00:00 +0000</lastBuildDate><atom:link href="https://www.curiosities.dev/computer-science/programming-challenges/language-concepts/performance/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>General Tips on Performance and Optimization</title>
      <link>https://www.curiosities.dev/computer-science/programming-challenges/language-concepts/performance/general-tips/</link>
      <pubDate>Tue, 26 Jul 2022 00:00:00 +0000</pubDate>
      
      <guid>https://www.curiosities.dev/computer-science/programming-challenges/language-concepts/performance/general-tips/</guid>
      <description>Trying to optimize may lead to errors and high-maintenance/change-resistant code. If there&amp;rsquo;s no need to optimize, let the code be. 
Only optimize performance-critical parts of a program. If your program spends 4% of its processing time doing computation A, and 40% of its time doing computation B, a 50% improvement on A is only as impactful as a 5% improvement on B. 
Complicated and/or low-level code is not necessarily faster than simple code.</description>
    </item>
    
  </channel>
</rss>
