<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Resource Management on Chege's Blog</title><link>https://www.curiosities.dev/computer-science/programming-challenges/language-concepts/resource-management/</link><description>Recent content in Resource Management on Chege's Blog</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Tue, 31 May 2022 00:00:00 +0000</lastBuildDate><atom:link href="https://www.curiosities.dev/computer-science/programming-challenges/language-concepts/resource-management/index.xml" rel="self" type="application/rss+xml"/><item><title>Resource Management in C++</title><link>https://www.curiosities.dev/computer-science/programming-challenges/language-concepts/resource-management/resource-management-cpp/</link><pubDate>Tue, 31 May 2022 00:00:00 +0000</pubDate><guid>https://www.curiosities.dev/computer-science/programming-challenges/language-concepts/resource-management/resource-management-cpp/</guid><description>Resource Handles RAII is also covered in Classes in C++ &amp;gt; Motivation for the Destructor Mechanism The constructor/destructor pattern enables objects defined in a scope to release the resources during exit from the scope, even when exceptions are thrown. All standard-library containers, e.g. std::vector, are implemented as resource handles.
std::unique_ptr and std::shared_ptr These &amp;ldquo;smart pointers&amp;rdquo; are useful in managing objects that are allocated on the free store (as opposed to those allocated on the stack).</description></item></channel></rss>