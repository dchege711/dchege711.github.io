<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Meta-Programming on Chege's Blog</title><link>https://www.curiosities.dev/computer-science/programming-challenges/language-concepts/meta-programming/</link><description>Recent content in Meta-Programming on Chege's Blog</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Mon, 28 Nov 2022 00:00:00 +0000</lastBuildDate><atom:link href="https://www.curiosities.dev/computer-science/programming-challenges/language-concepts/meta-programming/index.xml" rel="self" type="application/rss+xml"/><item><title>Attributes and Reflection in C#</title><link>https://www.curiosities.dev/computer-science/programming-challenges/language-concepts/meta-programming/dotnet-attributes/</link><pubDate>Tue, 08 Apr 2025 00:00:00 +0000</pubDate><guid>https://www.curiosities.dev/computer-science/programming-challenges/language-concepts/meta-programming/dotnet-attributes/</guid><description>When you compile code for the runtime, it is converted into common intermediate language (CIL) and placed inside a portable executable (PE) file along with metadata generated by the compiler. Attributes allow you to place extra descriptive information into metadata that can be extracted using runtime reflection services.
Example of reflection in C#: All types descended from the System.Object base class (the root of the type hierarchy in .NET) inherit the GetType() method.</description></item><item><title>C++ Meta-Programming</title><link>https://www.curiosities.dev/computer-science/programming-challenges/language-concepts/meta-programming/cpp-metaprogramming/</link><pubDate>Mon, 28 Nov 2022 00:00:00 +0000</pubDate><guid>https://www.curiosities.dev/computer-science/programming-challenges/language-concepts/meta-programming/cpp-metaprogramming/</guid><description>Clang, LLVM, GCC, and MSVC LLVM is an umbrella project, with several sub-projects, e.g. LLVM Core and Clang. LLVM Core libraries provide an optimizer and code generator for different CPUs. Clang is an &amp;ldquo;LLVM native&amp;rdquo; C/C++/Objective-C compiler which aims for fast compilation, useful error and warning messages, and a platform for building source-level tools. The Clang Static Analyzer and clang-tidy are examples of such tools.
So if I were to create a programming language, I can define a transformation into LLVM intermediate representation (LLVM IR), and that will make use of LLVM core to optimize it?</description></item></channel></rss>