<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Parameterization on Chege&#39;s Blog</title>
    <link>https://www.curiosities.dev/computer-science/programming-challenges/language-concepts/parameterization/</link>
    <description>Recent content in Parameterization on Chege&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 30 May 2022 00:00:00 +0000</lastBuildDate><atom:link href="https://www.curiosities.dev/computer-science/programming-challenges/language-concepts/parameterization/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Templates in C&#43;&#43;</title>
      <link>https://www.curiosities.dev/computer-science/programming-challenges/language-concepts/parameterization/templates-cpp/</link>
      <pubDate>Mon, 30 May 2022 00:00:00 +0000</pubDate>
      
      <guid>https://www.curiosities.dev/computer-science/programming-challenges/language-concepts/parameterization/templates-cpp/</guid>
      <description>A template is a class or a function that we can parameterize with a set of types or values. 
Parameterized Types The vector-of-doubles   can be generalized to a vector-of-anything type by making it a template:
// `template&amp;lt;typename T&amp;gt;` can be read as &amp;#34;for all types T&amp;#34;. Older code // uses `template&amp;lt;classs T&amp;gt;`, which is equivalent. template&amp;lt;typename T&amp;gt; class Vector { public: explicit Vector(int s); ~Vector() { delete[] elem; } // .</description>
    </item>
    
  </channel>
</rss>
