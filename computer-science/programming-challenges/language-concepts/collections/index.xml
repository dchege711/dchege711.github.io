<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Collections on Chege's Blog</title><link>https://www.curiosities.dev/computer-science/programming-challenges/language-concepts/collections/</link><description>Recent content in Collections on Chege's Blog</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Fri, 29 Aug 2025 00:00:00 +0000</lastBuildDate><atom:link href="https://www.curiosities.dev/computer-science/programming-challenges/language-concepts/collections/index.xml" rel="self" type="application/rss+xml"/><item><title>Collection Types in C#</title><link>https://www.curiosities.dev/computer-science/programming-challenges/language-concepts/collections/collection-types-csharp/</link><pubDate>Sat, 06 Sep 2025 00:00:00 +0000</pubDate><guid>https://www.curiosities.dev/computer-science/programming-challenges/language-concepts/collections/collection-types-csharp/</guid><description>Choosing a Collection Type In summary, the use cases are:
Dictionary&amp;lt;TKey, TValue&amp;gt; for quick look-up by key. List&amp;lt;T&amp;gt; for accessing items by index. Queue&amp;lt;T&amp;gt; for first-in-first-out (FIFO) access where the element is discarded after use. Stack&amp;lt;T&amp;gt; for last-in-first-out (LIFO) access where the element is discarded after use. LinkedList&amp;lt;T&amp;gt; for sequential access from either the head or the tail. ObservableCollection&amp;lt;T&amp;gt; to receive notifications when items are removed/added. SortedList&amp;lt;TKey, TValue&amp;gt; for a collection sorted by keys and accessible by either key or index.</description></item><item><title>Generic and Non-Generic Collection Interfaces in C#</title><link>https://www.curiosities.dev/computer-science/programming-challenges/language-concepts/collections/generic-and-non-generic-collections-csharp/</link><pubDate>Sat, 06 Sep 2025 00:00:00 +0000</pubDate><guid>https://www.curiosities.dev/computer-science/programming-challenges/language-concepts/collections/generic-and-non-generic-collections-csharp/</guid><description>There are two main types of collections: non-generic (ICollection) and generic (ICollection&amp;lt;T&amp;gt;).
Non-generic collections only exist because .NET did not originally have generic data types. They shouldn&amp;rsquo;t be used because:
They are untyped at compile time. The frequent casting from object and the actual type is error-prone; it&amp;rsquo;s easy to put the wrong type in the wrong collection. Value types need to be boxed as object, e.g., List&amp;lt;int&amp;gt; stores its data in an int[], which is more performant than using object[] as that requires boxing.</description></item></channel></rss>