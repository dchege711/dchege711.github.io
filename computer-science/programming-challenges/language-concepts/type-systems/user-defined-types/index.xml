<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>User-Defined Types on Chege&#39;s Blog</title>
    <link>https://www.curiosities.dev/computer-science/programming-challenges/language-concepts/type-systems/user-defined-types/</link>
    <description>Recent content in User-Defined Types on Chege&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sat, 04 Jun 2022 00:00:00 +0000</lastBuildDate><atom:link href="https://www.curiosities.dev/computer-science/programming-challenges/language-concepts/type-systems/user-defined-types/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Classes in C&#43;&#43;</title>
      <link>https://www.curiosities.dev/computer-science/programming-challenges/language-concepts/type-systems/user-defined-types/classes-in-cpp/</link>
      <pubDate>Thu, 12 May 2022 00:00:00 +0000</pubDate>
      
      <guid>https://www.curiosities.dev/computer-science/programming-challenges/language-concepts/type-systems/user-defined-types/classes-in-cpp/</guid>
      <description>quotes Doug McIlroy:
 Those types are not &amp;ldquo;abstract&amp;rdquo;; they are as real as int and float.
 What is the context of this quote?
  A class is a user-defined type provided to represent a concept in the code of a program. Essentially, all language facilities beyond the fundamental types, operators, and statements exist to help define better class or to use them more conveniently.</description>
    </item>
    
    <item>
      <title>Structures in C&#43;&#43;</title>
      <link>https://www.curiosities.dev/computer-science/programming-challenges/language-concepts/type-systems/user-defined-types/structures-in-cpp/</link>
      <pubDate>Sat, 04 Jun 2022 00:00:00 +0000</pubDate>
      
      <guid>https://www.curiosities.dev/computer-science/programming-challenges/language-concepts/type-systems/user-defined-types/structures-in-cpp/</guid>
      <description>A struct helps us organize the elements that a type needs into a data structure, e.g.
struct Vector { int sz; // number of elements  double* elem; // pointer to elements on the free store }; void vector_init(Vector&amp;amp; v, int s) { v.elem = new double[s]; v.sz = s; } 
However, notice that a user of Vector has to know every detail of a Vector&amp;rsquo;s representation. We can improve on this.</description>
    </item>
    
    <item>
      <title>Enumerations in C&#43;&#43;</title>
      <link>https://www.curiosities.dev/computer-science/programming-challenges/language-concepts/type-systems/user-defined-types/enumerations-in-cpp/</link>
      <pubDate>Sat, 04 Jun 2022 00:00:00 +0000</pubDate>
      
      <guid>https://www.curiosities.dev/computer-science/programming-challenges/language-concepts/type-systems/user-defined-types/enumerations-in-cpp/</guid>
      <description>Unscoped (or Plain or C-Style) Enumerations Plain (or C-style) enums are entered in the same scope as the name of their enum, and implicitly convert to their integer value, e.g.
enum Color { red, green, blue }; int col = green; Color c2 = 1; // error: invalid conversion from &amp;#39;int&amp;#39; to &amp;#39;Color&amp;#39; [-fpermissive]  enum CardColor { red, black }; // Error: &amp;#34;red&amp;#34; conflicts with a previous declaration</description>
    </item>
    
    <item>
      <title>Unions in C&#43;&#43;</title>
      <link>https://www.curiosities.dev/computer-science/programming-challenges/language-concepts/type-systems/user-defined-types/unions-in-cpp/</link>
      <pubDate>Sat, 04 Jun 2022 00:00:00 +0000</pubDate>
      
      <guid>https://www.curiosities.dev/computer-science/programming-challenges/language-concepts/type-systems/user-defined-types/unions-in-cpp/</guid>
      <description>A union is a struct in which all members are allocated at the same address so that the union occupies as much space as its largest member, e.g.
// This is a naked union because it doesn&amp;#39;t have an associated indicator // for which member it holds. union Value { Node* p; int i; } // The language doesn&amp;#39;t keep track of which kind of value is held by a // union, so the programmer must do that themselves, e.</description>
    </item>
    
  </channel>
</rss>
