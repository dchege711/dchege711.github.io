<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Advent of Code 2021 - Haskell on Chege's Blog</title><link>https://www.curiosities.dev/computer-science/programming-challenges/advent-of-code/2021/</link><description>Recent content in Advent of Code 2021 - Haskell on Chege's Blog</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Fri, 18 Feb 2022 00:00:00 +0000</lastBuildDate><atom:link href="https://www.curiosities.dev/computer-science/programming-challenges/advent-of-code/2021/index.xml" rel="self" type="application/rss+xml"/><item><title>Learning Haskell via AoC 2021</title><link>https://www.curiosities.dev/computer-science/programming-challenges/advent-of-code/2021/haskell-meta/</link><pubDate>Sat, 19 Feb 2022 00:00:00 +0000</pubDate><guid>https://www.curiosities.dev/computer-science/programming-challenges/advent-of-code/2021/haskell-meta/</guid><description>This page contains remarks on Haskell that I encountered when working with source files that span multiple AoC 2021 problems.
and have Haskell solutions. It&amp;rsquo;ll be nice to compare how they solved the problems. I don&amp;rsquo;t want to end up perfecting the wrong approach!
Setting Up Haskell Env for AoC To manage dependencies, Cabal and Stack are pretty popular. Stack incorporates the Cabal build system.</description></item><item><title>AoC 2021 Day 01: Sonar Sweep</title><link>https://www.curiosities.dev/computer-science/programming-challenges/advent-of-code/2021/src/SonarSweep/</link><pubDate>Fri, 18 Feb 2022 00:00:00 +0000</pubDate><guid>https://www.curiosities.dev/computer-science/programming-challenges/advent-of-code/2021/src/SonarSweep/</guid><description>Day 1 - Advent of Code 2021: Sonar Sweep. Eric Wastl. adventofcode.com . Accessed Feb 18, 2022. Part One As the submarine drops below the surface of the ocean, it automatically performs a sonar sweep of the nearby sea floor. On a small screen, the sonar weep report (your puzzle input) appears: each line is a measurement of the sea floor depth as the sweep looks further and further away from the submarine.</description></item><item><title>AoC 2021 Day 02: Dive!</title><link>https://www.curiosities.dev/computer-science/programming-challenges/advent-of-code/2021/src/Dive/02-dive/</link><pubDate>Sat, 19 Feb 2022 00:00:00 +0000</pubDate><guid>https://www.curiosities.dev/computer-science/programming-challenges/advent-of-code/2021/src/Dive/02-dive/</guid><description>Day 2 - Advent of Code 2021. Eric Wastl. adventofcode.com . Accessed Feb 19, 2022. Problem Statement Part One Now, you need to figure out how to pilot this thing.
It seems like the submarine can take a series of commands like forward 1, down 2, or up 3:
forward X increases the horizontal position by X units. down X increases the depth by X units.</description></item><item><title>AoC 2021 Day 03: Binary Diagnostic</title><link>https://www.curiosities.dev/computer-science/programming-challenges/advent-of-code/2021/src/BinaryDiagnostic/03-binary-diagnostic/</link><pubDate>Wed, 23 Feb 2022 00:00:00 +0000</pubDate><guid>https://www.curiosities.dev/computer-science/programming-challenges/advent-of-code/2021/src/BinaryDiagnostic/03-binary-diagnostic/</guid><description>Day 3 - Advent of Code 2021. Eric Wastl. adventofcode.com . Accessed Feb 23, 2022. Problem Description Part One The submarine has been making some odd creaking noises, so you ask it to produce a diagnostic report just in case.
The diagnostic report (your puzzle input) consists of a list of binary numbers which, when decoded properly, can tell you many useful things about the conditions of the submarine.</description></item><item><title>AoC 2021 Day 04: Giant Squid</title><link>https://www.curiosities.dev/computer-science/programming-challenges/advent-of-code/2021/src/GiantSquid/</link><pubDate>Fri, 25 Feb 2022 00:00:00 +0000</pubDate><guid>https://www.curiosities.dev/computer-science/programming-challenges/advent-of-code/2021/src/GiantSquid/</guid><description>Day 4 - Advent of Code 2021. Eric Wastl. adventofcode.com . Accessed Feb 25, 2022. Part One You&amp;rsquo;re already almost 1.5km (almost a mile) below the surface of the ocean, already so deep that you can&amp;rsquo;t see any sunlight. What you can see, however, is a giant squid that has attached itself to the outside of your submarine.
Maybe it wants to play bingo ?</description></item><item><title>AoC 2021 Day 05: Hydrothermal Venture</title><link>https://www.curiosities.dev/computer-science/programming-challenges/advent-of-code/2021/src/HydrothermalVenture/05-hydrothermal-venture/</link><pubDate>Sun, 27 Feb 2022 00:00:00 +0000</pubDate><guid>https://www.curiosities.dev/computer-science/programming-challenges/advent-of-code/2021/src/HydrothermalVenture/05-hydrothermal-venture/</guid><description>Problem Statement Part One You come across a field of hydrothermal vents on the ocean floor! These vents constantly produce large, opaque clouds, so it would be best to avoid them if possible.
They tend to form in lines; the submarine hopefully produces a list of nearby lines of vents (your puzzle input) for you to review.
Each line of vents is given as a line segment in the format (x1, y1 -&amp;gt; x2, y2), where x1,y1 are the coordinates of one end of the line segment, and x2,y2 are the coordinates of the other end.</description></item><item><title>AoC 2021 Day 06: Lanternfish</title><link>https://www.curiosities.dev/computer-science/programming-challenges/advent-of-code/2021/src/AoC2021/Lanternfish/</link><pubDate>Tue, 01 Mar 2022 00:00:00 +0000</pubDate><guid>https://www.curiosities.dev/computer-science/programming-challenges/advent-of-code/2021/src/AoC2021/Lanternfish/</guid><description>Day 6 - Advent of Code 2021. Eric Wastl. adventofcode.com . Accessed Mar 2, 2022. Part I Description The sea floor is getting steeper. Maybe the sleigh keys got carried this way?
A massive school of glowing lanternfish swims past. They must spawn quickly to reach such large numbers - maybe exponentially quickly? You should model their growth to be sure.
Although you know nothing about this specific species of lanternfish, you make some guesses about their attributes.</description></item><item><title>AoC 2021 Day 07: The Treachery of Whales</title><link>https://www.curiosities.dev/computer-science/programming-challenges/advent-of-code/2021/src/AoC2021/TreacheryOfWhales/</link><pubDate>Sat, 05 Mar 2022 00:00:00 +0000</pubDate><guid>https://www.curiosities.dev/computer-science/programming-challenges/advent-of-code/2021/src/AoC2021/TreacheryOfWhales/</guid><description>Day 7 - Advent of Code 2021. Eric Wastl. adventofcode.com . Accessed Mar 5, 2022. Part I Description A giant whale has decided that your submarine is its next meal, and it&amp;rsquo;s much faster than you are. There&amp;rsquo;s nowhere to run!
Suddenly, a swarm of crabs (each in its own tiny submarine - it&amp;rsquo;s too deep for them otherwise) zooms in to rescue you! They seem to be preparing to blast a hole in the ocean floor; sensors indicate a massive underground cave system just beyond where they&amp;rsquo;re aiming!</description></item><item><title>AoC 2021 Day 08: Seven Segment Search</title><link>https://www.curiosities.dev/computer-science/programming-challenges/advent-of-code/2021/src/AoC2021/SevenSegmentSearch/</link><pubDate>Mon, 07 Mar 2022 00:00:00 +0000</pubDate><guid>https://www.curiosities.dev/computer-science/programming-challenges/advent-of-code/2021/src/AoC2021/SevenSegmentSearch/</guid><description>Day 8 - Advent of Code 2021. Eric Wastl. adventofcode.com . Accessed Mar 7, 2022. Part I Description You barely reach the safety of the cave when the whale smashes into the cave mouth, collapsing it. Sensors indicate another exit to this cave at a much greater depth, so you have no choice but to press on.
As your submarine slowly makes its way through the cave system, you notice that the four-digit seven-segment displays in your submarine are malfunctioning; they must have been damaged during the escape.</description></item><item><title>AoC 2021 Day 09: Smoke Basin</title><link>https://www.curiosities.dev/computer-science/programming-challenges/advent-of-code/2021/src/AoC2021/SmokeBasin/</link><pubDate>Wed, 16 Mar 2022 00:00:00 +0000</pubDate><guid>https://www.curiosities.dev/computer-science/programming-challenges/advent-of-code/2021/src/AoC2021/SmokeBasin/</guid><description>Multi-dimensional arrays using &lt;code>massiv&lt;/code>; Fusion; Box vs. Unboxed; Connected Components; &lt;code>Data.Set&lt;/code>; Monadic map</description></item><item><title>AoC 2021 Day 10: Syntax Scoring</title><link>https://www.curiosities.dev/computer-science/programming-challenges/advent-of-code/2021/src/AoC2021/SyntaxScoring/</link><pubDate>Tue, 12 Apr 2022 00:00:00 +0000</pubDate><guid>https://www.curiosities.dev/computer-science/programming-challenges/advent-of-code/2021/src/AoC2021/SyntaxScoring/</guid><description>Day 10 - Advent of Code 2021. Eric Wastl. adventofcode.com . Accessed Apr 12, 2022. Part I You ask the submarine to determine the best route out of the deep-sea cave, but it only replies:
Syntax error in navigation subsystem on line: all of them The navigation subsystem is made of several lines containing chunks. There are one or more chunks on each line, and chunks contain zero or more other chunks.</description></item><item><title>AoC 2021 Input Parser</title><link>https://www.curiosities.dev/computer-science/programming-challenges/advent-of-code/2021/src/AoC2021InputParser/</link><pubDate>Mon, 07 Mar 2022 00:00:00 +0000</pubDate><guid>https://www.curiosities.dev/computer-science/programming-challenges/advent-of-code/2021/src/AoC2021InputParser/</guid><description>{-# OPTIONS_GHC -Wall #-} -- {-# LANGUAGE FlexibleContexts #-} -- The `(..)` syntax represents all of the constructors for the data type. [1] -- Without that export, we can pattern-match in BinaryDiagnostic.hs because we -- run into a &amp;#34;Not in scope: data constructor ‘BinaryDiagnostics’&amp;#34; error. -- -- [1]: https://stackoverflow.com/a/34548070/7812406 module AoC2021InputParser ( parseBinaryDiagnosticInput, parseBingoInput, parseHydrothermalVents, parseLanternfishInternalTimers, parseHorizontalCrabPositions, parseSevenSegmentsDisplay, parseHeightMap, ) where import BinaryDiagnostic.BinaryDiagnostic (BinaryDiagnostics (..), diagNums, diagWidth) import Control.DeepSeq (($!!)) import Data.</description></item><item><title>AoC 2021 Main</title><link>https://www.curiosities.dev/computer-science/programming-challenges/advent-of-code/2021/app/Main/</link><pubDate>Mon, 11 Apr 2022 00:00:00 +0000</pubDate><guid>https://www.curiosities.dev/computer-science/programming-challenges/advent-of-code/2021/app/Main/</guid><description>module Main where import qualified AoC2021 (runSolution) import AoC2021Args (Args(..), aocArgParser) import Options.Applicative main :: IO () main = runAoCSolutions =&amp;lt;&amp;lt; execParser opts where opts = info (aocArgParser &amp;lt;**&amp;gt; helper) ( fullDesc &amp;lt;&amp;gt; progDesc &amp;#34;Run solutions for a given DAY of AoC 2021&amp;#34; &amp;lt;&amp;gt; header &amp;#34;A module for running solutions for AoC 2021&amp;#34;) runAoCSolutions :: Args -&amp;gt; IO () runAoCSolutions (Args d) = AoC2021.runSolution d</description></item><item><title>AoC 2021 Solution Runner</title><link>https://www.curiosities.dev/computer-science/programming-challenges/advent-of-code/2021/src/AoC2021/</link><pubDate>Mon, 11 Apr 2022 00:00:00 +0000</pubDate><guid>https://www.curiosities.dev/computer-science/programming-challenges/advent-of-code/2021/src/AoC2021/</guid><description>{-# OPTIONS_GHC -Wall #-} module AoC2021 (runSolution) where -- https://cabal.readthedocs.io/en/3.4/cabal-package.html#accessing-data-files-from-package-code import AoC2021InputParser ( parseBinaryDiagnosticInput, parseBingoInput, parseHydrothermalVents, parseLanternfishInternalTimers, parseHorizontalCrabPositions, parseSevenSegmentsDisplay, parseHeightMap ) import BinaryDiagnostic.BinaryDiagnostic (lifeSupportRating, powerConsumption) import Data.String (IsString (fromString)) import Dive.Dive (productOfFinalPosition, productOfFinalPositionWithNewIntepretation) import GiantSquid (scoreOfFirstWinningBoard, scoreOfLastWinningBoard) import HydrothermalVenture.HydrothermalVenture ( pointsWithAtLeastTwoRightSegmentOverlaps, pointsWithAtLeastTwoSegmentOverlaps, ) import qualified AoC2021.Lanternfish (numOfFishIn80Days, numOfFishIn256Days) import qualified AoC2021.TreacheryOfWhales as TreacheryOfWhales ( minFuelForAlignmentWithConstantBurnRate, minFuelForAlignmentWithIncreasingBurnRate ) import Paths_advent_of_code_y2021 (getDataFileName) import SonarSweep ( num3MeasurementIncreases, numIncreases ) import System.IO (IOMode (ReadMode), hGetContents, withFile) import qualified AoC2021.</description></item><item><title>AoC 2021 Test Code</title><link>https://www.curiosities.dev/computer-science/programming-challenges/advent-of-code/2021/test/AoC2021Test/</link><pubDate>Mon, 11 Apr 2022 00:00:00 +0000</pubDate><guid>https://www.curiosities.dev/computer-science/programming-challenges/advent-of-code/2021/test/AoC2021Test/</guid><description>module Main (main) where import AoC2021InputParser ( parseBinaryDiagnosticInput, parseBingoInput, parseHydrothermalVents, parseLanternfishInternalTimers, parseHorizontalCrabPositions, parseSevenSegmentsDisplay, parseHeightMap ) import BinaryDiagnostic.BinaryDiagnostic (lifeSupportRating, powerConsumption) import Data.String (IsString (fromString)) import Dive.Dive (productOfFinalPosition, productOfFinalPositionWithNewIntepretation) import GiantSquid (scoreOfFirstWinningBoard, scoreOfLastWinningBoard) import HydrothermalVenture.HydrothermalVenture ( pointsWithAtLeastTwoRightSegmentOverlaps, pointsWithAtLeastTwoSegmentOverlaps, ) import qualified AoC2021.Lanternfish (numOfFishIn80Days, numOfFishIn256Days) import qualified AoC2021.TreacheryOfWhales as TreacheryOfWhales ( minFuelForAlignmentWithConstantBurnRate, minFuelForAlignmentWithIncreasingBurnRate ) import qualified AoC2021.SevenSegmentSearch as SevenSegmentSearch (numOf1478AppearancesInOutput, sumOfOutputValues) import qualified AoC2021.SmokeBasin as SmokeBasin ( sumOfRiskLevelsOfLowPoints, productOf3LargestBasins ) import Paths_advent_of_code_y2021 (getDataFileName) import SonarSweep ( num3MeasurementIncreases, numIncreases ) import System.</description></item><item><title>AoC 2021 Parsing Arguments</title><link>https://www.curiosities.dev/computer-science/programming-challenges/advent-of-code/2021/src/AoC2021Args/</link><pubDate>Mon, 11 Apr 2022 00:00:00 +0000</pubDate><guid>https://www.curiosities.dev/computer-science/programming-challenges/advent-of-code/2021/src/AoC2021Args/</guid><description>Parsing the Command Line lists a couple of libraries. and are the most popular options. Going with as it&amp;rsquo;s slightly more popular.
{-# OPTIONS_GHC -Wall #-} module AoC2021Args (Args(..), aocArgParser) where import Options.Applicative import Data.Semigroup ((&amp;lt;&amp;gt;)) data Args = Args { day :: Int } aocArgParser :: Parser Args aocArgParser = Args &amp;lt;$&amp;gt; option auto ( long &amp;#34;day&amp;#34; &amp;lt;&amp;gt; help &amp;#34;The day to run code for. Use &amp;#39;0&amp;#39; to run all of the solutions.</description></item></channel></rss>