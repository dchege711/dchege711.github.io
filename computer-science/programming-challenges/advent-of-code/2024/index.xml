<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Advent of Code 2024 - C# on Chege's Blog</title><link>https://www.curiosities.dev/computer-science/programming-challenges/advent-of-code/2024/</link><description>Recent content in Advent of Code 2024 - C# on Chege's Blog</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Wed, 25 Jun 2025 00:00:00 +0000</lastBuildDate><atom:link href="https://www.curiosities.dev/computer-science/programming-challenges/advent-of-code/2024/index.xml" rel="self" type="application/rss+xml"/><item><title>LLM Instructions for Advent of Code Using C#</title><link>https://www.curiosities.dev/computer-science/programming-challenges/advent-of-code/2024/aoc-csharp.instructions/</link><pubDate>Sun, 07 Sep 2025 00:00:00 +0000</pubDate><guid>https://www.curiosities.dev/computer-science/programming-challenges/advent-of-code/2024/aoc-csharp.instructions/</guid><description>The project uses modern C#. The user is an experienced programmer who has been writing C# for a year. Before that, the user mostly wrote imperative object oriented C++ code.
Reference concepts from https://learn.microsoft.com/en-us/dotnet/csharp/ where appropriate.
Beware of the user writing non idiomatic code, e.g., being too imperative where a declarative or functional programming approach might be better suited.</description></item><item><title>AoC 2024 Day 04: Ceres Search</title><link>https://www.curiosities.dev/computer-science/programming-challenges/advent-of-code/2024/AoC2024/04-ceres-search/04-ceres-search/</link><pubDate>Sat, 23 Aug 2025 00:00:00 +0000</pubDate><guid>https://www.curiosities.dev/computer-science/programming-challenges/advent-of-code/2024/AoC2024/04-ceres-search/04-ceres-search/</guid><description>Problem This word search allows words to be horizontal, vertical, diagonal, written backwards, or even overlapping other words. Here are a few ways XMAS might appear, where irrelevant characters have been replaced with .:
..X... .SAMX. .A..A. XMAS.S .X.... The actual word search will be full of letters instead. For example:
MMMSXXMASM MSAMXMSMSA AMXSXMAAMM MSAMASMSMX XMASAMXAMM XXAMMXXAMA SMSMSASXSS SAXAMASAAA MAMMMXMMMM MXMXAXMASX Parsing namespace AoC2024; public partial class CeresSearch { private readonly char[,] grid; public CeresSearch(string filePath) { using StreamReader inputReader = new(filePath); List&amp;lt;char[]&amp;gt; rows = []; string?</description></item><item><title>AoC 2024 Day 03: Mull It Over</title><link>https://www.curiosities.dev/computer-science/programming-challenges/advent-of-code/2024/AoC2024/03-null-it-over/03-mull-it-over/</link><pubDate>Wed, 02 Jul 2025 00:00:00 +0000</pubDate><guid>https://www.curiosities.dev/computer-science/programming-challenges/advent-of-code/2024/AoC2024/03-null-it-over/03-mull-it-over/</guid><description>Data The computer appears to be trying to run a program, but its memory is corrupted. All of the instructions have been jumbled up!
It seems like the goal of the program is just to multiply some numbers. It does that with instructions like mul(X,Y) where X and Y are each 1-3 digit numbers. For instance, mul(44,46) multiplies 44 and 46 to get a result of 2024.
However, because the program&amp;rsquo;s memory has been corrupted, there are also invalid characters that should be ignored, even if they look like a mul instruction.</description></item><item><title>AoC 2024 Day 02: Red-Nosed Reports</title><link>https://www.curiosities.dev/computer-science/programming-challenges/advent-of-code/2024/AoC2024/02-red-nosed-reports/02-red-nosed-reports/</link><pubDate>Mon, 30 Jun 2025 00:00:00 +0000</pubDate><guid>https://www.curiosities.dev/computer-science/programming-challenges/advent-of-code/2024/AoC2024/02-red-nosed-reports/02-red-nosed-reports/</guid><description>Data The unusual data consists of many reports, one report per line. Each report is a list of numbers called levels that are separated by spaces. For example:
7 6 4 2 1 1 2 7 8 9 9 7 6 2 1 1 3 2 4 5 8 6 4 4 1 1 3 6 7 9 To parse:
namespace AoC2024; public static partial class RedNosedReports { private static IEnumerable&amp;lt;IEnumerable&amp;lt;int&amp;gt;&amp;gt; GetReports(string filePath) { using StreamReader inputReader = new(filePath); string?</description></item><item><title>AoC 2024 Day 01: Historian Hysteria</title><link>https://www.curiosities.dev/computer-science/programming-challenges/advent-of-code/2024/AoC2024/01-historian-hysteria/01-historian-hysteria/</link><pubDate>Wed, 25 Jun 2025 00:00:00 +0000</pubDate><guid>https://www.curiosities.dev/computer-science/programming-challenges/advent-of-code/2024/AoC2024/01-historian-hysteria/01-historian-hysteria/</guid><description>Day 1 - Advent of Code 2024: Historian Hysteria. adventofcode.com . Accessed Jun 25, 2025. Data There&amp;rsquo;s just one problem: by holding the two lists up side by side, it quickly becomes clear that the lists aren&amp;rsquo;t very similar. Maybe you can help The Historians reconcile their lists?
For example:
3 4 4 3 2 5 1 3 3 9 3 3 To parse the input:</description></item></channel></rss>