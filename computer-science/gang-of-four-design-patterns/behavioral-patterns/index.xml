<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Behavioral Patterns on Chege&#39;s Blog</title>
    <link>https://www.curiosities.dev/computer-science/gang-of-four-design-patterns/behavioral-patterns/</link>
    <description>Recent content in Behavioral Patterns on Chege&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 28 Sep 2021 00:00:00 +0000</lastBuildDate><atom:link href="https://www.curiosities.dev/computer-science/gang-of-four-design-patterns/behavioral-patterns/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Observer</title>
      <link>https://www.curiosities.dev/computer-science/gang-of-four-design-patterns/behavioral-patterns/07-observer/</link>
      <pubDate>Tue, 28 Sep 2021 00:00:00 +0000</pubDate>
      
      <guid>https://www.curiosities.dev/computer-science/gang-of-four-design-patterns/behavioral-patterns/07-observer/</guid>
      <description>Intent A one-to-many dependency between object so that when one object (subject) changes, all its dependents (observers) are notified and update automatically.
A meta-point is that while we could achieve consistency by making the classes tightly coupled, we don&amp;rsquo;t want to do that because tight coupling reduces reusability.
What are the tradeoffs between the observer design pattern, and having the observer pass callbacks to the subject?
  Sample Code An abstract class defines the Observer interface:</description>
    </item>
    
  </channel>
</rss>
