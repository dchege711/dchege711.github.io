<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Software Engineering in Practice on Chege's Blog</title><link>https://www.curiosities.dev/computer-science/swe-in-practice/</link><description>Recent content in Software Engineering in Practice on Chege's Blog</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Sat, 16 Nov 2024 00:00:00 +0000</lastBuildDate><atom:link href="https://www.curiosities.dev/computer-science/swe-in-practice/index.xml" rel="self" type="application/rss+xml"/><item><title>Leading Big Projects</title><link>https://www.curiosities.dev/computer-science/swe-in-practice/leading-big-projects/</link><pubDate>Sat, 16 Nov 2024 00:00:00 +0000</pubDate><guid>https://www.curiosities.dev/computer-science/swe-in-practice/leading-big-projects/</guid><description>Create clarity for everyone such that they know what they need to do and how it fits into the bigger picture. Communicate openly. Give team members a stage to be publicly competent. Pick up the grunt work that others might not find enjoyable. Allocate time for support work, e.g., reviewing user feedback and error reports. Usually, the reason a project is difficult isn&amp;rsquo;t that you&amp;rsquo;re pushing the boundaries of technology, it&amp;rsquo;s that you&amp;rsquo;re dealing with ambiguity: unclear direction; messy, complicated humans; or legacy systems with behavior you can&amp;rsquo;t predict.</description></item><item><title>Finite Time as a SWE</title><link>https://www.curiosities.dev/computer-science/swe-in-practice/finite-time-swe/</link><pubDate>Sun, 20 Oct 2024 00:00:00 +0000</pubDate><guid>https://www.curiosities.dev/computer-science/swe-in-practice/finite-time-swe/</guid><description>Deliberately choose what to work on. Part of that is getting priority communicated by interested shareholders.
Empower less-experienced engineers so that they&amp;rsquo;re confident tackling different problems instead of me having to pick up said problems.
Improve my investigation and writing skills so that I can give folks enough context to execute on their own. Mostly communicating intent and trusting others to figure out the nitty gritty details.
Origins of Projects You&amp;rsquo;re invited to join.</description></item><item><title>Productivity for Software Engineers</title><link>https://www.curiosities.dev/computer-science/swe-in-practice/2022-12-16-swe-productivity/</link><pubDate>Fri, 16 Dec 2022 00:00:00 +0000</pubDate><guid>https://www.curiosities.dev/computer-science/swe-in-practice/2022-12-16-swe-productivity/</guid><description>Measuring Productivity Devs' Diverging Perceptions of Productivity Got interested in measuring it two years into my SWE career.
Initially rated myself based on % of completed daily objectives. The objectives didn&amp;rsquo;t necessarily correspond to work items. Stopped because the numbers were high even on days when I didn&amp;rsquo;t feel productive.
Switched to &amp;ldquo;stuff that affects others&amp;rdquo; (later came to know these are &amp;ldquo;function points&amp;rdquo;). More intuitively captures non-code objectives, e.g., aligning folks on feature specs.</description></item><item><title>Perspectives on Software Engineering</title><link>https://www.curiosities.dev/computer-science/swe-in-practice/2022-06-06-perspectives-on-swe/</link><pubDate>Mon, 06 Jun 2022 00:00:00 +0000</pubDate><guid>https://www.curiosities.dev/computer-science/swe-in-practice/2022-06-06-perspectives-on-swe/</guid><description>On the Clean Code Movement Good enough is good enough. The architectural choices and bugs in the implementation tend to be more impactful, so focus more on those.
Be conservative in what you consider technical debt. It should be something that slows down current/future changes, and not code that doesn&amp;rsquo;t &amp;ldquo;feel nice&amp;rdquo;. A code base that is free if technical debt is likely over-emphasizing polish over delivery.
Abstractions and indirections in the name of future-proofing tend to be wrong especially when treading new paths, where you can&amp;rsquo;t reliably predict the future.</description></item></channel></rss>