<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Data Models and Query Languages on Chege's Blog</title><link>https://www.curiosities.dev/computer-science/klepmann-ddia/01-foundations-of-data-systems/02-data-models-and-query-languages/</link><description>Recent content in Data Models and Query Languages on Chege's Blog</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Sun, 28 May 2023 00:00:00 +0000</lastBuildDate><atom:link href="https://www.curiosities.dev/computer-science/klepmann-ddia/01-foundations-of-data-systems/02-data-models-and-query-languages/index.xml" rel="self" type="application/rss+xml"/><item><title>Relational Model Versus Document Model</title><link>https://www.curiosities.dev/computer-science/klepmann-ddia/01-foundations-of-data-systems/02-data-models-and-query-languages/relational-model-vs-document-model/</link><pubDate>Sun, 28 May 2023 00:00:00 +0000</pubDate><guid>https://www.curiosities.dev/computer-science/klepmann-ddia/01-foundations-of-data-systems/02-data-models-and-query-languages/relational-model-vs-document-model/</guid><description>A relational data model uses tables that consist of rows and columns. A row can be uniquely identified by a table + ID combination. A column entry can reference another row in another table through a shared key. One goal is to avoid duplicating data. However, to answer a real-world query, we end up paying th cost by joining results from multiple tables. That said, with proper indexing and prior research, combining results is pretty fast.</description></item><item><title>Query Languages for Data</title><link>https://www.curiosities.dev/computer-science/klepmann-ddia/01-foundations-of-data-systems/02-data-models-and-query-languages/query-languages-for-data/</link><pubDate>Mon, 29 May 2023 00:00:00 +0000</pubDate><guid>https://www.curiosities.dev/computer-science/klepmann-ddia/01-foundations-of-data-systems/02-data-models-and-query-languages/query-languages-for-data/</guid><description>Query Languages for Data If you have a list of animal species and you want to return only the sharks in the list, a relational algebra expression would be \( \text{sharks} = \sigma_{\text{family = &amp;ldquo;Sharks&amp;rdquo;}}(\text{animals}) \). SQL queries follow the structure of relational algebra closely:
SELECT * FROM animals WHERE family = &amp;#39;Sharks&amp;#39;; &amp;hellip; while an imperative query would be:
function getSharks() { let sharks = []; for (let i = 0; i &amp;lt; animals.</description></item></channel></rss>