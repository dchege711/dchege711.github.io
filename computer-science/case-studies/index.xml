<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Case Studies: Elegant Implementations on Chege's Blog</title><link>https://www.curiosities.dev/computer-science/case-studies/</link><description>Recent content in Case Studies: Elegant Implementations on Chege's Blog</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Mon, 17 Feb 2025 00:00:00 +0000</lastBuildDate><atom:link href="https://www.curiosities.dev/computer-science/case-studies/index.xml" rel="self" type="application/rss+xml"/><item><title>Calculators</title><link>https://www.curiosities.dev/computer-science/case-studies/calculator/</link><pubDate>Mon, 17 Feb 2025 00:00:00 +0000</pubDate><guid>https://www.curiosities.dev/computer-science/case-studies/calculator/</guid><description>Android Calculator Making a precise calculator is not trivial. While \(10^{100} + 1 - 10^{100} = 1\), iOS&amp;rsquo;s calculator gives back \(0\). explores how Android&amp;rsquo;s calculator gets this right courtesy of .
Real number representations are fundamentally imprecise because we can&amp;rsquo;t squeeze in infinitely many real numbers into a finite number of bits. Floating-point representations have a base \(\beta\) (assumed to be even) and a precision \(p\), e.g., if \(\beta = 10\) and \(p = 3\), then \(0.</description></item></channel></rss>