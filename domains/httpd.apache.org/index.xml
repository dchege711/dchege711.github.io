<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>httpd.apache.org on Chege&#39;s Blog</title>
    <link>https://www.curiosities.dev/domains/httpd.apache.org/</link>
    <description>Recent content in httpd.apache.org on Chege&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 21 Nov 2018 00:00:00 +0000</lastBuildDate><atom:link href="https://www.curiosities.dev/domains/httpd.apache.org/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>03. Cross-Site Request Forgery (XSRF)</title>
      <link>https://www.curiosities.dev/computer-science/cos432-information-security/11-web-security/03-cross-site-request-forgery/</link>
      <pubDate>Wed, 21 Nov 2018 00:00:00 +0000</pubDate>
      
      <guid>https://www.curiosities.dev/computer-science/cos432-information-security/11-web-security/03-cross-site-request-forgery/</guid>
      <description>Cross-site Request Forgery (XSRF) &amp;lt;img src=&amp;#34;http://bank.com/transfer?from=from_ID&amp;amp;to=to_ID&amp;amp;value=1000&amp;#34;&amp;gt; Because the user is logged in and has a cookie, the victim site trusts the user&amp;rsquo;s browser.
The attacker gets user/browser to execute command on victim site, e.g. request a link, post a form. The command has permanent effects.
A frame can navigate its immediate children. Why is it designed such that it can&amp;rsquo;t navigate its children too?
Consider a website with a login frame, where the user inputs passwords.</description>
    </item>
    
  </channel>
</rss>
