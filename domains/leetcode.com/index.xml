<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>leetcode.com on Chege's Blog</title><link>https://www.curiosities.dev/domains/leetcode.com/</link><description>Recent content in leetcode.com on Chege's Blog</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Sun, 21 Jul 2024 00:00:00 +0000</lastBuildDate><atom:link href="https://www.curiosities.dev/domains/leetcode.com/index.xml" rel="self" type="application/rss+xml"/><item><title>Minimum Penalty for a Shop</title><link>https://www.curiosities.dev/computer-science/programming-challenges/leet-code-and-others/strings/minimum-penalty-for-a-shop/</link><pubDate>Sun, 21 Jul 2024 00:00:00 +0000</pubDate><guid>https://www.curiosities.dev/computer-science/programming-challenges/leet-code-and-others/strings/minimum-penalty-for-a-shop/</guid><description>Minimum Penalty for a Shop. leetcode.com . Accessed Jul 21, 2024. Problem You are given the customer visit log of a shop represented by a zero-indexed string customers consisting only of characters N and Y. If the \(i^{th}\) character is Y, it means that customers come at the \(i^{th}\) hour, whereas N indicates that no customers come at the \(i^{th}\) hour.
If the shop closes at the \(j^{th}\) hour (\(0 \le j \le n\)), the penalty is calculated as follows:</description></item><item><title>Minimizing Bottom-Right Paths in a 2xN Grid</title><link>https://www.curiosities.dev/computer-science/programming-challenges/leet-code-and-others/grids/grid_game/</link><pubDate>Sat, 20 Jul 2024 00:00:00 +0000</pubDate><guid>https://www.curiosities.dev/computer-science/programming-challenges/leet-code-and-others/grids/grid_game/</guid><description>Grid Game - LeetCode. leetcode.com . Accessed Jul 20, 2024. Problem You are given a 0-indexed 2D array grid of size \(2 \times n\), where grid[r][c] represents the number of points at position \((r, c)\) on the matrix. Two robots are playing a game on this matrix.
Both robots initially start at \((0, 0)\) and want to reach \((1, n-1)\). Each robot may only move to the right or down.</description></item><item><title>Sorting and Searching</title><link>https://www.curiosities.dev/computer-science/programming-challenges/leet-code-and-others/sorting-and-searching/</link><pubDate>Mon, 01 Aug 2022 00:00:00 +0000</pubDate><guid>https://www.curiosities.dev/computer-science/programming-challenges/leet-code-and-others/sorting-and-searching/</guid><description>Order Statistics K-th Smallest Element in Sorted Matrix Given an \(N \times N\) matrix, where each of the rows and columns are sorted in ascending order, return the \(k^{th}\) smallest element in the matrix. The memory complexity must be better than \(O(N^2)\).
It&amp;rsquo;s not guaranteed that matrix[r][c] &amp;gt; matrix[r-1][c], so we can&amp;rsquo;t compute the row (and similarly, the column) in which the \(k^{th}\) smallest element is in.
Using a priority queue that holds the \(K\) smallest elements does not work because the memory usage is \(O(K)\), where \(K\) can be any value in \([1, N^2]\).</description></item><item><title>Spanning 4-Directional Walks From Origin to Destination w/ Obstacles</title><link>https://www.curiosities.dev/computer-science/programming-challenges/leet-code-and-others/grids/4-directional-spanning-walks-with-obstacles/</link><pubDate>Sun, 31 Jul 2022 00:00:00 +0000</pubDate><guid>https://www.curiosities.dev/computer-science/programming-challenges/leet-code-and-others/grids/4-directional-spanning-walks-with-obstacles/</guid><description>Problem Given an \(M \times N\) integer array grid where grid[i][j] could be:
1 representing the starting square. There is exactly one starting square. 2 representing the ending square. There is exactly one ending square. 0 representing empty squares that we can walk over. -1 representing obstacles that we cannot walk over. Return the number of 4-directional walks from the starting square to the ending square, that walk over every non-obstacle square exactly once.</description></item><item><title>Unique Paths to the Bottom-Right Corner w/ Obstacles</title><link>https://www.curiosities.dev/computer-science/programming-challenges/leet-code-and-others/grids/unique-down-right-paths-with-obstacles/</link><pubDate>Sun, 31 Jul 2022 00:00:00 +0000</pubDate><guid>https://www.curiosities.dev/computer-science/programming-challenges/leet-code-and-others/grids/unique-down-right-paths-with-obstacles/</guid><description>Problem Starting from the top-left corner, what is the number of possible unique paths to reach the bottom-right corner, if you can only move either down or right at any point in time, and the path cannot include any square that is an obstacle?
Solution The addition of obstacles has these implications:
I can&amp;rsquo;t use the combinatorics formula because the problem is no longer easy to define in general terms.</description></item></channel></rss>