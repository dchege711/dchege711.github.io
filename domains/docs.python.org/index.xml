<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>docs.python.org on Chege's Blog</title><link>https://www.curiosities.dev/domains/docs.python.org/</link><description>Recent content in docs.python.org on Chege's Blog</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Sat, 23 Aug 2025 00:00:00 +0000</lastBuildDate><atom:link href="https://www.curiosities.dev/domains/docs.python.org/index.xml" rel="self" type="application/rss+xml"/><item><title>AoC 2021 Day 09: Smoke Basin</title><link>https://www.curiosities.dev/computer-science/programming-challenges/advent-of-code/2021/src/AoC2021/SmokeBasin/</link><pubDate>Wed, 16 Mar 2022 00:00:00 +0000</pubDate><guid>https://www.curiosities.dev/computer-science/programming-challenges/advent-of-code/2021/src/AoC2021/SmokeBasin/</guid><description>Multi-dimensional arrays using &lt;code>massiv&lt;/code>; Fusion; Box vs. Unboxed; Connected Components; &lt;code>Data.Set&lt;/code>; Monadic map</description></item><item><title>023. Non-Abundant Sums</title><link>https://www.curiosities.dev/computer-science/programming-challenges/project_euler/non_abundant_sums/023-non-abundant-sums/</link><pubDate>Sun, 19 Feb 2023 00:00:00 +0000</pubDate><guid>https://www.curiosities.dev/computer-science/programming-challenges/project_euler/non_abundant_sums/023-non-abundant-sums/</guid><description>#23 Non-abundant sums - Project Euler. projecteuler.net . Accessed Feb 19, 2023. Problem Statement A perfect number is a number for which the sum of its proper divisors is exactly equal to the number. For example, the sum of the proper divisors of \(28\) would be \(1 + 2 + 4 + 7 + 14 = 28\), which means that \(28\) is a perfect number.</description></item><item><title>AoC 2024 Day 07: Bridge Repair</title><link>https://www.curiosities.dev/computer-science/programming-challenges/advent-of-code/2024/AoC2024/07-bridge-repair/07-bridge-repair/</link><pubDate>Sat, 23 Aug 2025 00:00:00 +0000</pubDate><guid>https://www.curiosities.dev/computer-science/programming-challenges/advent-of-code/2024/AoC2024/07-bridge-repair/07-bridge-repair/</guid><description>Parsing Each line represents a single equation, e.g., 292: 11 6 16 20.
Part One needs to make a decision based on each line independently. Parsing each line into a data structure and yielding that should suffice.
using System.Collections.Immutable; using System.Text.RegularExpressions; namespace AoC2024; public partial class BridgeRepair { public static IEnumerable&amp;lt;CalibrationEquation&amp;gt; Parse(string filePath) { using var inputReader = new StreamReader(filePath); string? line; while ((line = inputReader.ReadLine()) != null) { var numbers = InputLineRegex.</description></item></channel></rss>