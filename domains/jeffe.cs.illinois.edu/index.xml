<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>jeffe.cs.illinois.edu on Chege's Blog</title><link>https://www.curiosities.dev/domains/jeffe.cs.illinois.edu/</link><description>Recent content in jeffe.cs.illinois.edu on Chege's Blog</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Sun, 07 Nov 2021 00:00:00 +0000</lastBuildDate><atom:link href="https://www.curiosities.dev/domains/jeffe.cs.illinois.edu/index.xml" rel="self" type="application/rss+xml"/><item><title>'Monte Carlo' Algorithms and Data Structures</title><link>https://www.curiosities.dev/computer-science/algorithms-and-data-structures/randomized-algs-and-ds/monte-carlo-algs-and-ds/</link><pubDate>Sun, 07 Nov 2021 00:00:00 +0000</pubDate><guid>https://www.curiosities.dev/computer-science/algorithms-and-data-structures/randomized-algs-and-ds/monte-carlo-algs-and-ds/</guid><description>remarks that most algorithm researchers don&amp;rsquo;t use the terms &amp;ldquo;Monte Carlo&amp;rdquo; and &amp;ldquo;Las Vegas&amp;rdquo; to desribe such algorithms.
These algorithms are always fast (as opposed to having a small probability of being slow), but they return the wrong answer with some small probability.
Some MC algorithms have one-sided errors, e.g. a false-biased MC algorithm will always be correct when it returns false, but will be wrong with some bounded probability \(p\).</description></item><item><title>Bloom Filters</title><link>https://www.curiosities.dev/computer-science/algorithms-and-data-structures/randomized-algs-and-ds/monte-carlo-algs-and-ds/bloom-filters/</link><pubDate>Sun, 07 Nov 2021 00:00:00 +0000</pubDate><guid>https://www.curiosities.dev/computer-science/algorithms-and-data-structures/randomized-algs-and-ds/monte-carlo-algs-and-ds/bloom-filters/</guid><description>Bloom Filters In true fashion to Stigler&amp;rsquo;s Law of Eponymy (no scientific discovery is named after its original discoverer ), Ross Ashby (1960) did a probabilistic analysis of Calvin Mooers&amp;rsquo;s Zatocoding (1947) (coding system for library cards). This predates Burton Bloom&amp;rsquo;s work (1970).
Motivation A Bloom filter for a set \(X: \{x_1, x_2, &amp;hellip;, x_n\} \) from some universe \(\mathbb{U}\) allows one to test whether a given item \(x \in \mathbb{B}\) is an element of \(X\).</description></item></channel></rss>