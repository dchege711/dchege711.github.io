<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>stackoverflow.com on Chege's Blog</title><link>https://www.curiosities.dev/domains/stackoverflow.com/</link><description>Recent content in stackoverflow.com on Chege's Blog</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Sat, 22 Jun 2024 00:00:00 +0000</lastBuildDate><atom:link href="https://www.curiosities.dev/domains/stackoverflow.com/index.xml" rel="self" type="application/rss+xml"/><item><title>Relational Model Versus Document Model</title><link>https://www.curiosities.dev/computer-science/distributed-systems/klepmann-ddia/01-foundations-of-data-systems/02-data-models-and-query-languages/relational-model-vs-document-model/</link><pubDate>Sun, 28 May 2023 00:00:00 +0000</pubDate><guid>https://www.curiosities.dev/computer-science/distributed-systems/klepmann-ddia/01-foundations-of-data-systems/02-data-models-and-query-languages/relational-model-vs-document-model/</guid><description>A relational data model uses tables that consist of rows and columns. A row can be uniquely identified by a table + ID combination. A column entry can reference another row in another table through a shared key. One goal is to avoid duplicating data. However, to answer a real-world query, we end up paying th cost by joining results from multiple tables. That said, with proper indexing and prior research, combining results is pretty fast.</description></item><item><title>AoC 2021 Day 03: Binary Diagnostic</title><link>https://www.curiosities.dev/computer-science/programming-challenges/advent-of-code/2021/src/BinaryDiagnostic/03-binary-diagnostic/</link><pubDate>Wed, 23 Feb 2022 00:00:00 +0000</pubDate><guid>https://www.curiosities.dev/computer-science/programming-challenges/advent-of-code/2021/src/BinaryDiagnostic/03-binary-diagnostic/</guid><description>Day 3 - Advent of Code 2021. Eric Wastl. adventofcode.com . Accessed Feb 23, 2022. Problem Description Part One The submarine has been making some odd creaking noises, so you ask it to produce a diagnostic report just in case.
The diagnostic report (your puzzle input) consists of a list of binary numbers which, when decoded properly, can tell you many useful things about the conditions of the submarine.</description></item><item><title>AoC 2021 Day 09: Smoke Basin</title><link>https://www.curiosities.dev/computer-science/programming-challenges/advent-of-code/2021/src/AoC2021/SmokeBasin/</link><pubDate>Wed, 16 Mar 2022 00:00:00 +0000</pubDate><guid>https://www.curiosities.dev/computer-science/programming-challenges/advent-of-code/2021/src/AoC2021/SmokeBasin/</guid><description>Multi-dimensional arrays using &lt;code>massiv&lt;/code>; Fusion; Box vs. Unboxed; Connected Components; &lt;code>Data.Set&lt;/code>; Monadic map</description></item><item><title>Classes in C++</title><link>https://www.curiosities.dev/computer-science/programming-challenges/language-concepts/type-systems/user-defined-types/classes-in-cpp/</link><pubDate>Thu, 12 May 2022 00:00:00 +0000</pubDate><guid>https://www.curiosities.dev/computer-science/programming-challenges/language-concepts/type-systems/user-defined-types/classes-in-cpp/</guid><description>quotes Doug McIlroy:
Those types are not &amp;ldquo;abstract&amp;rdquo;; they are as real as int and float.
What is the context of this quote?
A class is a user-defined type provided to represent a concept in the code of a program. Essentially, all language facilities beyond the fundamental types, operators, and statements exist to help define better class or to use them more conveniently.</description></item><item><title>020. Factorial Digit Sum</title><link>https://www.curiosities.dev/computer-science/programming-challenges/project_euler/factorial_digit_sum/020-factorial-digit-sum/</link><pubDate>Sat, 15 Jan 2022 00:00:00 +0000</pubDate><guid>https://www.curiosities.dev/computer-science/programming-challenges/project_euler/factorial_digit_sum/020-factorial-digit-sum/</guid><description>Problem Statement \(n!\) means \(n \times (n - 1) \times &amp;hellip; \times 3 \times 2 \times 1\).
For example, \(10! = 10 \times 9 \times &amp;hellip; \times 3 \times 2 \times 1 = 3628800\), and the sum of the digits in the number \(10!\) is \(3 + 6 + 2 + 8 + 8 + 0 + 0 = 27\).
Find the sum of the digits in the number \(100!</description></item><item><title>Testing in a Monorepo</title><link>https://www.curiosities.dev/computer-science/programming-challenges/flashcards-app/testing/</link><pubDate>Sat, 22 Jun 2024 00:00:00 +0000</pubDate><guid>https://www.curiosities.dev/computer-science/programming-challenges/flashcards-app/testing/</guid><description>Testing Web Components While any test framework can work, it&amp;rsquo;s better to test web components in a browser environment because that&amp;rsquo;s where they&amp;rsquo;ll be used. Node-based frameworks would require too much shimming of DOM calls that&amp;rsquo;d make the tests unrepresentative. and are good options for browser-based testing.
is powered by ES-build, and so is the client-side of the app; let&amp;rsquo;s go down this path and see where it leads.</description></item><item><title>Inheritance</title><link>https://www.curiosities.dev/computer-science/programming-challenges/language-concepts/type-systems/user-defined-types/inheritance/</link><pubDate>Sun, 05 May 2024 00:00:00 +0000</pubDate><guid>https://www.curiosities.dev/computer-science/programming-challenges/language-concepts/type-systems/user-defined-types/inheritance/</guid><description>Mixins Introduced to mixins by . Didn&amp;rsquo;t know that there are passionate advocates for this, e.g., &amp;rsquo;s &amp;ldquo;You can even look at normal subclass inheritance as a degenerate form of mixin inheritance where the superclass is known at class definition time, and there&amp;rsquo;s only one application of it.&amp;rdquo;
A mix-in is an abstract subclass. This technique is especially useful in languages where a class can only have a single superclass.</description></item><item><title>Markup Features</title><link>https://www.curiosities.dev/computer-science/programming-challenges/flashcards-app/markup-features/</link><pubDate>Sat, 27 Apr 2024 00:00:00 +0000</pubDate><guid>https://www.curiosities.dev/computer-science/programming-challenges/flashcards-app/markup-features/</guid><description>Syntax Highlighting Previously, we&amp;rsquo;d highlight code on the client by loading src/lib/highlight.pack.js, a bundle downloaded from but served from our domain, and then execute hljs.highlightBlock on demand, e.g., on page load, when showing a card, etc. This doesn&amp;rsquo;t work well with a web-component-centric design. Running hljs.highlightBlock through possible Shadow DOM boundaries is a hassle.
Back in 2018 , we installed highlightjs, a shim for the official HighlightJS.</description></item><item><title>Client/Server Interface</title><link>https://www.curiosities.dev/computer-science/programming-challenges/flashcards-app/client-server-interface/</link><pubDate>Fri, 19 Apr 2024 00:00:00 +0000</pubDate><guid>https://www.curiosities.dev/computer-science/programming-challenges/flashcards-app/client-server-interface/</guid><description>How to handle redirects without setting window.location.href? Right now, there&amp;rsquo;s a pattern of doing:
sendHTTPRequest(&amp;#34;POST&amp;#34;, &amp;#34;/login/&amp;#34;, {}) .then((_) =&amp;gt; { window.location.href = &amp;#34;/&amp;#34;; }) .catch((err) =&amp;gt; { console.error(err); }); Isn&amp;rsquo;t this something that the server can do? In response, why not issue a redirect?
Screenshot of the redirect chain from /login. The POST request gets a 303 (See Other) redirect to /home. The browser then makes a GET request to /home, which results in a 304 (Not Modified).</description></item><item><title>Observer</title><link>https://www.curiosities.dev/computer-science/gang-of-four-design-patterns/behavioral-patterns/07-observer/</link><pubDate>Tue, 28 Sep 2021 00:00:00 +0000</pubDate><guid>https://www.curiosities.dev/computer-science/gang-of-four-design-patterns/behavioral-patterns/07-observer/</guid><description>notes that , the primary source, glosses over nitty-gritties. e.g. the &amp;ldquo;message queue&amp;rdquo; server. Maybe reading through these will provide a larger perspective to design decisions made in Chromium regarding observers.
Rant: some of willchan&amp;rsquo;s thoughts on WeakPtr, for those who care to read criticizes the observer pattern for murking dependency chains. Investigate more in this regard.
Intent A one-to-many dependency between object so that when one object (subject) changes, all its dependents (observers) are notified and update automatically.</description></item></channel></rss>