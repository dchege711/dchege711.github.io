<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>abseil.io on Chege&#39;s Blog</title>
    <link>https://www.curiosities.dev/domains/abseil.io/</link>
    <description>Recent content in abseil.io on Chege&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 31 May 2022 00:00:00 +0000</lastBuildDate><atom:link href="https://www.curiosities.dev/domains/abseil.io/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Classes in C&#43;&#43;</title>
      <link>https://www.curiosities.dev/computer-science/programming-challenges/language-concepts/type-systems/user-defined-types/classes-in-cpp/</link>
      <pubDate>Thu, 12 May 2022 00:00:00 +0000</pubDate>
      
      <guid>https://www.curiosities.dev/computer-science/programming-challenges/language-concepts/type-systems/user-defined-types/classes-in-cpp/</guid>
      <description>quotes Doug McIlroy:
 Those types are not &amp;ldquo;abstract&amp;rdquo;; they are as real as int and float.
 What is the context of this quote?
  A class is a user-defined type provided to represent a concept in the code of a program. Essentially, all language facilities beyond the fundamental types, operators, and statements exist to help define better class or to use them more conveniently.</description>
    </item>
    
    <item>
      <title>Resource Management in C&#43;&#43;</title>
      <link>https://www.curiosities.dev/computer-science/programming-challenges/language-concepts/resource-management/resource-management-cpp/</link>
      <pubDate>Tue, 31 May 2022 00:00:00 +0000</pubDate>
      
      <guid>https://www.curiosities.dev/computer-science/programming-challenges/language-concepts/resource-management/resource-management-cpp/</guid>
      <description>Resource Handles RAII is also covered in Classes in C++ &amp;gt; Motivation for the Destructor Mechanism    The constructor/destructor pattern enables objects defined in a scope to release the resources during exit from the scope, even when exceptions are thrown. All standard-library containers, e.g. std::vector, are implemented as resource handles. 
std::unique_ptr and std::shared_ptr These &amp;ldquo;smart pointers&amp;rdquo; are useful in managing objects that are allocated on the free store (as opposed to those allocated on the stack).</description>
    </item>
    
  </channel>
</rss>
