<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>react.dev on Chege's Blog</title><link>https://www.curiosities.dev/domains/react.dev/</link><description>Recent content in react.dev on Chege's Blog</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Tue, 28 May 2024 00:00:00 +0000</lastBuildDate><atom:link href="https://www.curiosities.dev/domains/react.dev/index.xml" rel="self" type="application/rss+xml"/><item><title>Of Stale UI and Re-renders</title><link>https://www.curiosities.dev/computer-science/programming-challenges/flashcards-app/web-components/of-stale-ui-and-re-renders/</link><pubDate>Tue, 28 May 2024 00:00:00 +0000</pubDate><guid>https://www.curiosities.dev/computer-science/programming-challenges/flashcards-app/web-components/of-stale-ui-and-re-renders/</guid><description>More than once, I&amp;rsquo;ve been surprised by a web component either showing data that should no longer be there, or not showing data that should be there. This page aims to reason through such cases for a better mental model of web components.
Rendering Lists Both &amp;lt;search-bar&amp;gt; and &amp;lt;search-results&amp;gt; need to render a collection of N items. offers two options: looping, or using the repeat(items, keyFunction, itemTemplate) directive.
const cards = html` ${cards.</description></item></channel></rss>