<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>github.com on Chege's Blog</title><link>https://www.curiosities.dev/domains/github.com/</link><description>Recent content in github.com on Chege's Blog</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Sun, 01 Jun 2025 00:00:00 +0000</lastBuildDate><atom:link href="https://www.curiosities.dev/domains/github.com/index.xml" rel="self" type="application/rss+xml"/><item><title>Learning Haskell via AoC 2021</title><link>https://www.curiosities.dev/computer-science/programming-challenges/advent-of-code/2021/haskell-meta/</link><pubDate>Sat, 19 Feb 2022 00:00:00 +0000</pubDate><guid>https://www.curiosities.dev/computer-science/programming-challenges/advent-of-code/2021/haskell-meta/</guid><description>This page contains remarks on Haskell that I encountered when working with source files that span multiple AoC 2021 problems.
and have Haskell solutions. It&amp;rsquo;ll be nice to compare how they solved the problems. I don&amp;rsquo;t want to end up perfecting the wrong approach!
Setting Up Haskell Env for AoC To manage dependencies, Cabal and Stack are pretty popular. Stack incorporates the Cabal build system.</description></item><item><title>AoC 2021 Day 01: Sonar Sweep</title><link>https://www.curiosities.dev/computer-science/programming-challenges/advent-of-code/2021/src/SonarSweep/</link><pubDate>Fri, 18 Feb 2022 00:00:00 +0000</pubDate><guid>https://www.curiosities.dev/computer-science/programming-challenges/advent-of-code/2021/src/SonarSweep/</guid><description>Day 1 - Advent of Code 2021: Sonar Sweep. adventofcode.com . Accessed Feb 18, 2022. Part One As the submarine drops below the surface of the ocean, it automatically performs a sonar sweep of the nearby sea floor. On a small screen, the sonar weep report (your puzzle input) appears: each line is a measurement of the sea floor depth as the sweep looks further and further away from the submarine.</description></item><item><title>02. The Subject</title><link>https://www.curiosities.dev/writing/the-new-strategy-of-style/02-subject-and-thesis/</link><pubDate>Mon, 02 Jan 2017 00:00:00 +0000</pubDate><guid>https://www.curiosities.dev/writing/the-new-strategy-of-style/02-subject-and-thesis/</guid><description>The Subject The number of words aren&amp;rsquo;t intuitive to me. Adults tend to read non-fiction at 238 words per minute. So a good test for how appropriate a piece of writing is, &amp;ldquo;Can the writer cover X in N minutes?&amp;rdquo;
Hugo uses 213 WPM, while Medium uses 265 WPM, suggesting Medium has a bias for skimming over close reading.
I wonder if a browser extension that rates the appropriateness of articles given their subject and their word count is a feasible/desirable thing.</description></item><item><title>Browse Page</title><link>https://www.curiosities.dev/computer-science/programming-challenges/flashcards-app/web-components/browse-page/</link><pubDate>Sat, 20 Apr 2024 00:00:00 +0000</pubDate><guid>https://www.curiosities.dev/computer-science/programming-challenges/flashcards-app/web-components/browse-page/</guid><description>When a user lands at /browse, this UI is shown. A couple of components seem to emerge: search-bar, tags-list, card-results, and mini-card.
&amp;lt;search-bar&amp;gt; Currently, this is rendered by search_bar_dropdown.ejs, a partial that that is included in both /home and /browse. The fact that there it has JS, no server-delivered content, and has CSS makes it a good candidate for a web component. Revving up search-bar.ts.
Ran into Uncaught TypeError: Class constructor s cannot be invoked without 'new' on the export class SearchBar extends LitElement line.</description></item><item><title>03. Cross-Site Request Forgery (XSRF)</title><link>https://www.curiosities.dev/computer-science/cos432-information-security/11-web-security/03-cross-site-request-forgery/</link><pubDate>Wed, 21 Nov 2018 00:00:00 +0000</pubDate><guid>https://www.curiosities.dev/computer-science/cos432-information-security/11-web-security/03-cross-site-request-forgery/</guid><description>Cross-site Request Forgery (XSRF) &amp;lt;img src=&amp;#34;http://bank.com/transfer?from=from_ID&amp;amp;to=to_ID&amp;amp;value=1000&amp;#34;&amp;gt; Because the user is logged in and has a cookie, the victim site trusts the user&amp;rsquo;s browser.
The attacker gets user/browser to execute command on victim site, e.g. request a link, post a form. The command has permanent effects.
A frame can navigate its immediate children. Why is it designed such that it can&amp;rsquo;t navigate its children too?
Consider a website with a login frame, where the user inputs passwords.</description></item><item><title>The Cards Manager</title><link>https://www.curiosities.dev/computer-science/programming-challenges/flashcards-app/web-components/cards-manager/</link><pubDate>Sun, 28 Apr 2024 00:00:00 +0000</pubDate><guid>https://www.curiosities.dev/computer-science/programming-challenges/flashcards-app/web-components/cards-manager/</guid><description>UI Design Legacy card viewing UI at /browse.
This time we&amp;rsquo;ll use the more semantic and a11y-friendly &amp;lt;dialog&amp;gt; element . Centering it in the page is done by the browser, and that saves us a bit of hassle &amp;ndash; thought it would have been feasible with how &amp;lt;search-bar&amp;gt;&amp;rsquo;s &amp;lt;ul&amp;gt; floats above the page.
CardsManager Interface The previous/next buttons make use of the CardsManager object that has the API:</description></item><item><title>AoC 2021 Day 08: Seven Segment Search</title><link>https://www.curiosities.dev/computer-science/programming-challenges/advent-of-code/2021/src/AoC2021/SevenSegmentSearch/</link><pubDate>Mon, 07 Mar 2022 00:00:00 +0000</pubDate><guid>https://www.curiosities.dev/computer-science/programming-challenges/advent-of-code/2021/src/AoC2021/SevenSegmentSearch/</guid><description>Day 8 - Advent of Code 2021. adventofcode.com . Accessed Mar 7, 2022. Part I Description You barely reach the safety of the cave when the whale smashes into the cave mouth, collapsing it. Sensors indicate another exit to this cave at a much greater depth, so you have no choice but to press on.
As your submarine slowly makes its way through the cave system, you notice that the four-digit seven-segment displays in your submarine are malfunctioning; they must have been damaged during the escape.</description></item><item><title>AoC 2021 Day 09: Smoke Basin</title><link>https://www.curiosities.dev/computer-science/programming-challenges/advent-of-code/2021/src/AoC2021/SmokeBasin/</link><pubDate>Wed, 16 Mar 2022 00:00:00 +0000</pubDate><guid>https://www.curiosities.dev/computer-science/programming-challenges/advent-of-code/2021/src/AoC2021/SmokeBasin/</guid><description>Multi-dimensional arrays using &lt;code>massiv&lt;/code>; Fusion; Box vs. Unboxed; Connected Components; &lt;code>Data.Set&lt;/code>; Monadic map</description></item><item><title>021. Amicable Numbers</title><link>https://www.curiosities.dev/computer-science/programming-challenges/project_euler/amicable_numbers/021-amicable-numbers/</link><pubDate>Sat, 06 Feb 2021 00:00:00 +0000</pubDate><guid>https://www.curiosities.dev/computer-science/programming-challenges/project_euler/amicable_numbers/021-amicable-numbers/</guid><description>Problem Statement Let \(d(n)\) be defined as the sum of proper divisors of \(n\) (numbers less than \(n\) which divide evenly into \(n\)).
If \(d(a) = b\) and \(d(b) = a\), where \(a \neq b\), then \(a\) and \(b\) are an amicable pair and each of \(a\) and \(b\) are called amicable numbers.
For example, the proper divisors of \(220\) are \(1, 2, 4, 5, 10, 11, 20, 22, 44, 55, 110\); therefore \(d(220) = 284\).</description></item><item><title>Copilot in VS Code</title><link>https://www.curiosities.dev/computer-science/large-language-models/writing-code-with-llms/</link><pubDate>Sun, 01 Jun 2025 00:00:00 +0000</pubDate><guid>https://www.curiosities.dev/computer-science/large-language-models/writing-code-with-llms/</guid><description>My work is primarily in Microsoft&amp;rsquo;s ecosystem, so learning Copilot usage in VS Code is pretty important. If not for my own productivity gains, then for having knowledgeable conversations with coworkers about using LLMs as a SWE.
Copilot-Powered Scenarios AI Code Completions I&amp;rsquo;ve found code completions more distracting than useful. Probably because I already have an idea of what I want to type, and Copilot&amp;rsquo;s hallucinations slow me down.</description></item><item><title>UX for LLMs</title><link>https://www.curiosities.dev/computer-science/large-language-models/ux-for-llms/</link><pubDate>Sun, 16 Feb 2025 00:00:00 +0000</pubDate><guid>https://www.curiosities.dev/computer-science/large-language-models/ux-for-llms/</guid><description>tldraw.com&amp;rsquo;s Take on an LLM Canvas is a library for creating infinite canvas experiences in React.
In UX history, chat has tended to precede canvas. From running computers from the command prompt to using the screen as a canvas via a mouse. Mobile phones went from being keypad oriented into a canvas where the finger controls the touchscreen. Where are the canvases for LLMs?
Multi-modal models, e.</description></item><item><title>WWW Watering Hole</title><link>https://www.curiosities.dev/computer-science/www/www-watering-hole/</link><pubDate>Sun, 09 Feb 2025 00:00:00 +0000</pubDate><guid>https://www.curiosities.dev/computer-science/www/www-watering-hole/</guid><description>As the web evolves, where do practitioners congregate and exchange ideas?
Working Groups develops standards and guidelines to help everyone build a web based on the principles of accessibility, internationalization, privacy and security.
publishes standards and drafts , which are then implemented by browser vendors, e.g., Chromium, Firefox, and Safari. Topics of interest: accessibility, browser, CSS, data, DOM, digital publishing, graphics, HTML, HTTP, internationalization, media, performance, privacy, protocol, security, web API, web fonts, Web of Things (WoT), and XML.</description></item><item><title>NBA 2K25: MyNBA</title><link>https://www.curiosities.dev/sports/nba2k-mynba/nba2k25-mynba/</link><pubDate>Sat, 31 Aug 2024 00:00:00 +0000</pubDate><guid>https://www.curiosities.dev/sports/nba2k-mynba/nba2k25-mynba/</guid><description>MyNBA is my favorite playing mode in NBA 2K. Starting out as the GM of the Seattle Supersonics in 1983, how well can I steer the franchise?
Playing all 82 games per season would need \(82 \text{ games/season} \times 41 \text{ seasons} \times 20 \text{ min/game} \approx 47 \text{ days}\) to catch up to today&amp;rsquo;s NBA and that&amp;rsquo;s not accounting for the playoffs. Simulating games is the way to go; might help improve my understanding of the game.</description></item><item><title>Testing in a Monorepo</title><link>https://www.curiosities.dev/computer-science/programming-challenges/flashcards-app/testing/</link><pubDate>Sat, 22 Jun 2024 00:00:00 +0000</pubDate><guid>https://www.curiosities.dev/computer-science/programming-challenges/flashcards-app/testing/</guid><description>Testing Web Components While any test framework can work, it&amp;rsquo;s better to test web components in a browser environment because that&amp;rsquo;s where they&amp;rsquo;ll be used. Node-based frameworks would require too much shimming of DOM calls that&amp;rsquo;d make the tests unrepresentative. and are good options for browser-based testing.
is powered by ES-build, and so is the client-side of the app; let&amp;rsquo;s go down this path and see where it leads.</description></item><item><title>Database Layer</title><link>https://www.curiosities.dev/computer-science/programming-challenges/flashcards-app/database-layer/</link><pubDate>Sun, 16 Jun 2024 00:00:00 +0000</pubDate><guid>https://www.curiosities.dev/computer-science/programming-challenges/flashcards-app/database-layer/</guid><description>Currently using MongoDB&amp;rsquo;s free tier, which has shared RAM, and up to 5GB of storage . So far, the overall DB usage has been less than 5MB.
Query Injection Current State of Affairs Currently have this protection implemented back in 2018:
/** * @description Prevent a NoSQL Injection in the search parameters. This is * achieved by deleting all query values that begin with `$`. */ export function sanitizeQuery(query: any) { const keys = Object.</description></item><item><title>Continuous Integration Tooling</title><link>https://www.curiosities.dev/computer-science/programming-challenges/flashcards-app/ci-tooling/</link><pubDate>Sun, 09 Jun 2024 00:00:00 +0000</pubDate><guid>https://www.curiosities.dev/computer-science/programming-challenges/flashcards-app/ci-tooling/</guid><description>What automatic tools can I add to keep code quality high?
CodeQL CodeQL is a tool that runs variant analysis on code. The idea is that we create a query from a known vulnerability, e.g., SQL injection, and then run it against a codebase to find instances of that vulnerability. GitHub authorizes the use of CodeQL for public repos, and so we are covered . ql-analysis.sh has a recipe for running the analysis locally in the repo.</description></item><item><title>Markup Features</title><link>https://www.curiosities.dev/computer-science/programming-challenges/flashcards-app/markup-features/</link><pubDate>Sat, 27 Apr 2024 00:00:00 +0000</pubDate><guid>https://www.curiosities.dev/computer-science/programming-challenges/flashcards-app/markup-features/</guid><description>Syntax Highlighting Previously, we&amp;rsquo;d highlight code on the client by loading src/lib/highlight.pack.js, a bundle downloaded from but served from our domain, and then execute hljs.highlightBlock on demand, e.g., on page load, when showing a card, etc. This doesn&amp;rsquo;t work well with a web-component-centric design. Running hljs.highlightBlock through possible Shadow DOM boundaries is a hassle.
Back in 2018 , we installed highlightjs, a shim for the official HighlightJS.</description></item><item><title>Client/Server Interface</title><link>https://www.curiosities.dev/computer-science/programming-challenges/flashcards-app/client-server-interface/</link><pubDate>Fri, 19 Apr 2024 00:00:00 +0000</pubDate><guid>https://www.curiosities.dev/computer-science/programming-challenges/flashcards-app/client-server-interface/</guid><description>How to handle redirects without setting window.location.href? Right now, there&amp;rsquo;s a pattern of doing:
sendHTTPRequest(&amp;#34;POST&amp;#34;, &amp;#34;/login/&amp;#34;, {}) .then((_) =&amp;gt; { window.location.href = &amp;#34;/&amp;#34;; }) .catch((err) =&amp;gt; { console.error(err); }); Isn&amp;rsquo;t this something that the server can do? In response, why not issue a redirect?
Screenshot of the redirect chain from /login. The POST request gets a 303 (See Other) redirect to /home. The browser then makes a GET request to /home, which results in a 304 (Not Modified).</description></item><item><title>Debugging</title><link>https://www.curiosities.dev/computer-science/debugging/</link><pubDate>Sat, 02 Jul 2022 00:00:00 +0000</pubDate><guid>https://www.curiosities.dev/computer-science/debugging/</guid><description>Debugging 101 Definition? Debugging involves inspecting a program&amp;rsquo;s internal state.
printf Debugging and Logging In printf debugging, one adds print statements and keeps iterating until enough information has been extracted.
Using logging has several advantages over printf debugging: varying logging destinations (e.g. standard output, files, sockets, remote servers, etc.); severity levels (e.g. INFO, DEBUG, WARN, ERROR, &amp;amp;c) that support filtering of output; color-coding for readability.
Terminals have varying levels of color support: plain color; ANSI escape codes (16 color codes with bold/italic and background); 256 color palette; 24-bit truecolor (&amp;ldquo;888&amp;rdquo; colors, aka 16 million, e.</description></item><item><title>Software Engineering Journal Reviews</title><link>https://www.curiosities.dev/computer-science/2022-01-16-swe-journal-reviews/</link><pubDate>Sat, 15 Jan 2022 00:00:00 +0000</pubDate><guid>https://www.curiosities.dev/computer-science/2022-01-16-swe-journal-reviews/</guid><description>Formal Software Design Alloy is an open-source language and analyzer for software modeling. An Alloy model is a collection of constraints that describe a set of structures, e.g. all possible security configurations of a web application. Alloy&amp;rsquo;s tool, the Alloy Analyzer is a solver that takes the constraints of a model and finds structures that satisfy them.
📑 The Alloy Analyzer leverages a SAT solver, and this precludes Alloy from analyzing optimization problems.</description></item><item><title>Journal Reviews on Fairness</title><link>https://www.curiosities.dev/computer-science/bias-and-fairness/2021-10-04-journal-reviews-on-fairness/</link><pubDate>Mon, 04 Oct 2021 00:00:00 +0000</pubDate><guid>https://www.curiosities.dev/computer-science/bias-and-fairness/2021-10-04-journal-reviews-on-fairness/</guid><description>Meta 📑 Instead of changing the data or learners in multiple ways and then see if fairness improves, postulate that the root causes of bias are the prior decisions that generated the training data. These affect (a) what data was selected, and (b) the labels assigned to the examples. They propose the \(\text{Fair-SMOTE}\) (Fair Synthetic Minority Over Sampling Technique) algorithm which (1) removes biased labels (via situation testing: if the model&amp;rsquo;s prediction for a data point changes once all of the data points' protected attributes are flipped, then that label is biased and the data point is discarded), and (2) rebalances internal distributions such that based on a protected attribute, examples are equal in both positive and negative classes.</description></item><item><title>LLMs: Stochastic Parrots 🦜 and How (Not) to Use Them</title><link>https://www.curiosities.dev/computer-science/large-language-models/stochastic-parrots/</link><pubDate>Wed, 03 Mar 2021 00:00:00 +0000</pubDate><guid>https://www.curiosities.dev/computer-science/large-language-models/stochastic-parrots/</guid><description>was written in a period when NLP practitioners are producing bigger (# of parameters; size of training data) language models (LMs), and pushing the top scores on benchmarks. The paper itself was controversial because it led to Gebru being fired from Google, following disagreements with her managers on conditions (withdraw, or remove Google-affiliated authors) for publishing the paper.
A lot changed since mid-2021, when I initially wrote this page.</description></item><item><title>Software Dependencies</title><link>https://www.curiosities.dev/computer-science/2020-11-14-software-dependencies/</link><pubDate>Sat, 14 Nov 2020 00:00:00 +0000</pubDate><guid>https://www.curiosities.dev/computer-science/2020-11-14-software-dependencies/</guid><description>Dependency Management Golang introduced a new library referencing mode to overcome limitations of the old one. While the two library modes are supported by Golang, they are incompatible, e.g. dependency management (DM) issues, reference inconsistencies, build failures, etc. did an empirical study that resulted in HERO, an automated technique to detect DM issues and suggest fixes. Applied to 19k Golang projects, HERO detected 98.5% on a DM issue benchmark, and found 2,422 new DM issues in 2,356 Golang projects.</description></item><item><title>ML Usefulness to a Dev</title><link>https://www.curiosities.dev/computer-science/machine-learning/ml-crash-course/ml-concepts/01-introduction-to-ml/</link><pubDate>Sat, 24 Oct 2020 00:00:00 +0000</pubDate><guid>https://www.curiosities.dev/computer-science/machine-learning/ml-crash-course/ml-concepts/01-introduction-to-ml/</guid><description>Link to Original Video ML Usefulness to a Dev Reduce time spent programming, e.g. manually crafted spellchecker with rules of thumb vs. feeding ML model some examples. How many words are there in English? Is it hard to have a huge set of all the possible words? How do spellcheckers do it?
Hunspell is the most popular OSS , and it was being used by Chromium , but on Chromium for Windows, the Windows Spellcheck is used .</description></item><item><title>ML Usefulness to a Dev</title><link>https://www.curiosities.dev/computer-science/machine-learning/perspectives-on-ml/gdev-intro-to-ml/</link><pubDate>Sat, 24 Oct 2020 00:00:00 +0000</pubDate><guid>https://www.curiosities.dev/computer-science/machine-learning/perspectives-on-ml/gdev-intro-to-ml/</guid><description>Link to Original Video ML Usefulness to a Dev Reduce time spent programming, e.g. manually crafted spellchecker with rules of thumb vs. feeding ML model some examples. How many words are there in English? Is it hard to have a huge set of all the possible words? How do spellcheckers do it?
Hunspell is the most popular OSS , and it was being used by Chromium , but on Chromium for Windows, the Windows Spellcheck is used .</description></item><item><title>On Socio-Economic Classes</title><link>https://www.curiosities.dev/socioeconomics/2020-07-04-socioeconomic-classes/</link><pubDate>Sat, 04 Jul 2020 00:00:00 +0000</pubDate><guid>https://www.curiosities.dev/socioeconomics/2020-07-04-socioeconomic-classes/</guid><description>#meritocracy #inequality #socioeconomics
Our Lot in Life Not recognizing your blessings feeds into the dark side of capitalism and meritocracy: success is a choice, and that those who haven’t achieved success are not unlucky, but unworthy.
I&amp;rsquo;m relatively lucky. I don&amp;rsquo;t know how much of the techie hubris that I bear. I have unresolved feelings about meritocracy and fairness. Race is usually used as a proxy for bridging the gap, e.</description></item></channel></rss>