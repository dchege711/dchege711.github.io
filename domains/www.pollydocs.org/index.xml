<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>www.pollydocs.org on Chege's Blog</title><link>https://www.curiosities.dev/domains/www.pollydocs.org/</link><description>Recent content in www.pollydocs.org on Chege's Blog</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Sat, 19 Jul 2025 00:00:00 +0000</lastBuildDate><atom:link href="https://www.curiosities.dev/domains/www.pollydocs.org/index.xml" rel="self" type="application/rss+xml"/><item><title>Resilient App Development in .NET</title><link>https://www.curiosities.dev/computer-science/distributed-systems/resilient-app-development-dotnet/</link><pubDate>Sat, 19 Jul 2025 00:00:00 +0000</pubDate><guid>https://www.curiosities.dev/computer-science/distributed-systems/resilient-app-development-dotnet/</guid><description>Microsoft.Extensions.Resilience and Microsoft.Extensions.Http.Resilience provide resilience mechanisms against transient failures. These two packages are built on top of the open-source Polly resilience library.
Build a Resilience Pipeline Given a ServiceCollection services, configure a keyed resilience pipeline as follows:
const string key = &amp;#34;Retry-Timeout&amp;#34;; services.AddResiliencePipeline(key, static builder =&amp;gt; { builder.AddRetry(new RetryStrategyOptions { ShouldHandle = new PredicateBuilder().Handle&amp;lt;TimeoutRejectedException&amp;gt;() }); builder.AddTimeout(TimeSpan.FromSeconds(1.5)); }); Other Add* extension methods include AddCircuitBreaker, AddRateLimiter, AddConcurrencyLimiter, AddFallback, and AddHedging.</description></item></channel></rss>