<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>open-wc.org on Chege's Blog</title><link>https://www.curiosities.dev/domains/open-wc.org/</link><description>Recent content in open-wc.org on Chege's Blog</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Sat, 22 Jun 2024 00:00:00 +0000</lastBuildDate><atom:link href="https://www.curiosities.dev/domains/open-wc.org/index.xml" rel="self" type="application/rss+xml"/><item><title>Using Web Components</title><link>https://www.curiosities.dev/computer-science/programming-challenges/flashcards-app/web-components/</link><pubDate>Thu, 18 Apr 2024 00:00:00 +0000</pubDate><guid>https://www.curiosities.dev/computer-science/programming-challenges/flashcards-app/web-components/</guid><description>What does it take to use web components? lists several options, and Google&amp;rsquo;s lit is leading the pack in popularity at 1.6M weekly downloads. Stencil (703K, Ionic ), solid-js (269K, Netlify ), and FAST (88K, Microsoft ) round up the list of libraries with +50K weekly NPM downloads.
collects stats on bundle sizes and performance.</description></item><item><title>Testing in a Monorepo</title><link>https://www.curiosities.dev/computer-science/programming-challenges/flashcards-app/testing/</link><pubDate>Sat, 22 Jun 2024 00:00:00 +0000</pubDate><guid>https://www.curiosities.dev/computer-science/programming-challenges/flashcards-app/testing/</guid><description>Testing Web Components While any test framework can work, it&amp;rsquo;s better to test web components in a browser environment because that&amp;rsquo;s where they&amp;rsquo;ll be used. Node-based frameworks would require too much shimming of DOM calls that&amp;rsquo;d make the tests unrepresentative. and are good options for browser-based testing.
is powered by ES-build, and so is the client-side of the app; let&amp;rsquo;s go down this path and see where it leads.</description></item></channel></rss>