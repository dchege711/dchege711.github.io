<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>www.npmjs.com on Chege's Blog</title><link>https://www.curiosities.dev/domains/www.npmjs.com/</link><description>Recent content in www.npmjs.com on Chege's Blog</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Sat, 22 Jun 2024 00:00:00 +0000</lastBuildDate><atom:link href="https://www.curiosities.dev/domains/www.npmjs.com/index.xml" rel="self" type="application/rss+xml"/><item><title>Testing in a Monorepo</title><link>https://www.curiosities.dev/computer-science/programming-challenges/flashcards-app/testing/</link><pubDate>Sat, 22 Jun 2024 00:00:00 +0000</pubDate><guid>https://www.curiosities.dev/computer-science/programming-challenges/flashcards-app/testing/</guid><description>Testing Web Components While any test framework can work, it&amp;rsquo;s better to test web components in a browser environment because that&amp;rsquo;s where they&amp;rsquo;ll be used. Node-based frameworks would require too much shimming of DOM calls that&amp;rsquo;d make the tests unrepresentative. and are good options for browser-based testing.
is powered by ES-build, and so is the client-side of the app; let&amp;rsquo;s go down this path and see where it leads.</description></item><item><title>Database Layer</title><link>https://www.curiosities.dev/computer-science/programming-challenges/flashcards-app/database-layer/</link><pubDate>Sun, 16 Jun 2024 00:00:00 +0000</pubDate><guid>https://www.curiosities.dev/computer-science/programming-challenges/flashcards-app/database-layer/</guid><description>Currently using MongoDB&amp;rsquo;s free tier, which has shared RAM, and up to 5GB of storage . So far, the overall DB usage has been less than 5MB.
Query Injection Current State of Affairs Currently have this protection implemented back in 2018:
/** * @description Prevent a NoSQL Injection in the search parameters. This is * achieved by deleting all query values that begin with `$`. */ export function sanitizeQuery(query: any) { const keys = Object.</description></item></channel></rss>