<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>developer.mozilla.org on Chege's Blog</title><link>https://www.curiosities.dev/domains/developer.mozilla.org/</link><description>Recent content in developer.mozilla.org on Chege's Blog</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Sun, 09 Feb 2025 00:00:00 +0000</lastBuildDate><atom:link href="https://www.curiosities.dev/domains/developer.mozilla.org/index.xml" rel="self" type="application/rss+xml"/><item><title>Query Languages for Data</title><link>https://www.curiosities.dev/computer-science/distributed-systems/klepmann-ddia/01-foundations-of-data-systems/02-data-models-and-query-languages/query-languages-for-data/</link><pubDate>Mon, 29 May 2023 00:00:00 +0000</pubDate><guid>https://www.curiosities.dev/computer-science/distributed-systems/klepmann-ddia/01-foundations-of-data-systems/02-data-models-and-query-languages/query-languages-for-data/</guid><description>Query Languages for Data If you have a list of animal species and you want to return only the sharks in the list, a relational algebra expression would be \( \text{sharks} = \sigma_{\text{family = &amp;ldquo;Sharks&amp;rdquo;}}(\text{animals}) \). SQL queries follow the structure of relational algebra closely:
SELECT * FROM animals WHERE family = &amp;#39;Sharks&amp;#39;; &amp;hellip; while an imperative query would be:
function getSharks() { let sharks = []; for (let i = 0; i &amp;lt; animals.</description></item><item><title>The Cards Manager</title><link>https://www.curiosities.dev/computer-science/programming-challenges/flashcards-app/web-components/cards-manager/</link><pubDate>Sun, 28 Apr 2024 00:00:00 +0000</pubDate><guid>https://www.curiosities.dev/computer-science/programming-challenges/flashcards-app/web-components/cards-manager/</guid><description>UI Design Legacy card viewing UI at /browse.
This time we&amp;rsquo;ll use the more semantic and a11y-friendly &amp;lt;dialog&amp;gt; element . Centering it in the page is done by the browser, and that saves us a bit of hassle &amp;ndash; thought it would have been feasible with how &amp;lt;search-bar&amp;gt;&amp;rsquo;s &amp;lt;ul&amp;gt; floats above the page.
CardsManager Interface The previous/next buttons make use of the CardsManager object that has the API:</description></item><item><title>WWW Watering Hole</title><link>https://www.curiosities.dev/computer-science/www/www-watering-hole/</link><pubDate>Sun, 09 Feb 2025 00:00:00 +0000</pubDate><guid>https://www.curiosities.dev/computer-science/www/www-watering-hole/</guid><description>As the web evolves, where do practitioners congregate and exchange ideas?
Working Groups develops standards and guidelines to help everyone build a web based on the principles of accessibility, internationalization, privacy and security.
publishes standards and drafts , which are then implemented by browser vendors, e.g., Chromium, Firefox, and Safari. Topics of interest: accessibility, browser, CSS, data, DOM, digital publishing, graphics, HTML, HTTP, internationalization, media, performance, privacy, protocol, security, web API, web fonts, Web of Things (WoT), and XML.</description></item><item><title>Inheritance</title><link>https://www.curiosities.dev/computer-science/programming-challenges/language-concepts/type-systems/user-defined-types/inheritance/</link><pubDate>Sun, 05 May 2024 00:00:00 +0000</pubDate><guid>https://www.curiosities.dev/computer-science/programming-challenges/language-concepts/type-systems/user-defined-types/inheritance/</guid><description>Mixins Introduced to mixins by . Didn&amp;rsquo;t know that there are passionate advocates for this, e.g., &amp;rsquo;s &amp;ldquo;You can even look at normal subclass inheritance as a degenerate form of mixin inheritance where the superclass is known at class definition time, and there&amp;rsquo;s only one application of it.&amp;rdquo;
A mix-in is an abstract subclass. This technique is especially useful in languages where a class can only have a single superclass.</description></item><item><title>Client/Server Interface</title><link>https://www.curiosities.dev/computer-science/programming-challenges/flashcards-app/client-server-interface/</link><pubDate>Fri, 19 Apr 2024 00:00:00 +0000</pubDate><guid>https://www.curiosities.dev/computer-science/programming-challenges/flashcards-app/client-server-interface/</guid><description>How to handle redirects without setting window.location.href? Right now, there&amp;rsquo;s a pattern of doing:
sendHTTPRequest(&amp;#34;POST&amp;#34;, &amp;#34;/login/&amp;#34;, {}) .then((_) =&amp;gt; { window.location.href = &amp;#34;/&amp;#34;; }) .catch((err) =&amp;gt; { console.error(err); }); Isn&amp;rsquo;t this something that the server can do? In response, why not issue a redirect?
Screenshot of the redirect chain from /login. The POST request gets a 303 (See Other) redirect to /home. The browser then makes a GET request to /home, which results in a 304 (Not Modified).</description></item><item><title>Use of Local Storage</title><link>https://www.curiosities.dev/computer-science/programming-challenges/flashcards-app/use-of-local-storage/</link><pubDate>Thu, 18 Apr 2024 00:00:00 +0000</pubDate><guid>https://www.curiosities.dev/computer-science/programming-challenges/flashcards-app/use-of-local-storage/</guid><description>Back when I wrote this, the motivation for using localStorage was to reduce the trips to the server so that the app is usable offline. However, with two data stores (localStorage and the server), the former has a possibility of going stale. What usage is correct and how can we avoid stale data?
localStorage['session_info'] getAccountInfo: () =&amp;gt; AuthenticateUser | null fetches the session_info entry and JSON.parses it into an AuthenticateUser. This is a possible failure point because the parsed JSON cannot be trusted to be a valid AuthenticateUser instance.</description></item></channel></rss>