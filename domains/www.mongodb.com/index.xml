<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>www.mongodb.com on Chege's Blog</title><link>https://www.curiosities.dev/domains/www.mongodb.com/</link><description>Recent content in www.mongodb.com on Chege's Blog</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Sun, 16 Jun 2024 00:00:00 +0000</lastBuildDate><atom:link href="https://www.curiosities.dev/domains/www.mongodb.com/index.xml" rel="self" type="application/rss+xml"/><item><title>Query Languages for Data</title><link>https://www.curiosities.dev/computer-science/klepmann-ddia/01-foundations-of-data-systems/02-data-models-and-query-languages/query-languages-for-data/</link><pubDate>Mon, 29 May 2023 00:00:00 +0000</pubDate><guid>https://www.curiosities.dev/computer-science/klepmann-ddia/01-foundations-of-data-systems/02-data-models-and-query-languages/query-languages-for-data/</guid><description>Query Languages for Data If you have a list of animal species and you want to return only the sharks in the list, a relational algebra expression would be \( \text{sharks} = \sigma_{\text{family = &amp;ldquo;Sharks&amp;rdquo;}}(\text{animals}) \). SQL queries follow the structure of relational algebra closely:
SELECT * FROM animals WHERE family = &amp;#39;Sharks&amp;#39;; &amp;hellip; while an imperative query would be:
function getSharks() { let sharks = []; for (let i = 0; i &amp;lt; animals.</description></item><item><title>Database Layer</title><link>https://www.curiosities.dev/computer-science/programming-challenges/flashcards-app/database-layer/</link><pubDate>Sun, 16 Jun 2024 00:00:00 +0000</pubDate><guid>https://www.curiosities.dev/computer-science/programming-challenges/flashcards-app/database-layer/</guid><description>Currently using MongoDB&amp;rsquo;s free tier, which has shared RAM, and up to 5GB of storage . So far, the overall DB usage has been less than 5MB.
Query Injection Current State of Affairs Currently have this protection implemented back in 2018:
/** * @description Prevent a NoSQL Injection in the search parameters. This is * achieved by deleting all query values that begin with `$`. */ export function sanitizeQuery(query: any) { const keys = Object.</description></item></channel></rss>